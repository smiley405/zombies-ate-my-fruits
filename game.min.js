// packages/inputs/Keyboard.js
function Keyboard(keys) {
  const inputKeys = {};
  for (let key in keys) {
    inputKeys[key] = {
      code: keys[key],
      down: false
    };
  }
  window.addEventListener("keydown", onKeyDownHandler, false);
  window.addEventListener("keyup", onKeyUpHandler, false);
  function onKeyDownHandler(e) {
    setKeyPressState(e.key, true);
  }
  function onKeyUpHandler(e) {
    setKeyPressState(e.key, false);
  }
  function setKeyPressState(keyCode, isDown) {
    const keys2 = Object.keys(inputKeys);
    keys2.forEach((key) => {
      const inputKey = inputKeys[key];
      if (keyCode === inputKey.code) {
        if (isDown) {
          if (!inputKey.down && inputKey.onDown) {
            inputKey.onDown();
          }
        }
        inputKey.down = isDown;
      }
    });
  }
  return {
    is: (key) => {
      return inputKeys[key];
    }
  };
}

// packages/utils/css.js
function toPx(value) {
  return value + "px";
}

// packages/render/Canvaslayers.js
function CanvasLayers() {
  const layers = [];
  function add(id, width, height) {
    const canvas = document.createElement("canvas");
    canvas.setAttribute("width", toPx(width));
    canvas.setAttribute("height", toPx(height));
    canvas.setAttribute("tabindex", "-1");
    canvas.setAttribute("id", id);
    canvas.setAttribute("opa", id);
    const ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = false;
    const layer = { id, canvas, ctx };
    layers.push(layer);
    return layer;
  }
  function remove(id) {
    for (let i = 0; i < layers.length; i++) {
      const layer = layers[i];
      if (layer.id === id) {
        layers.splice(i, 1);
        return;
      }
    }
  }
  function get(id) {
    const layer = layers.filter((val) => val.id === id);
    return layer.length ? layer[0] : void 0;
  }
  return {
    add,
    remove,
    get
  };
}

// packages/render/CanvasPool.js
var pool = {};
function toCanvasPool(uid) {
  if (!pool[uid]) {
    const _canvas = document.createElement("canvas");
    const _ctx = _canvas.getContext("2d");
    pool[uid] = { canvas: _canvas, ctx: _ctx };
  }
  return pool[uid];
}
function dropCanvasPool(uid) {
  if (pool[uid]) {
    delete pool[uid];
  }
}

// packages/utils/misc.js
var _totalUID = 0;
function getUID() {
  return _totalUID += 1;
}
function hitTest(r1, r2) {
  const dx = r1.x + r1.width / 2 - (r2.x + r2.width / 2);
  const dy = r1.y + r1.height / 2 - (r2.y + r2.height / 2);
  const dw = (r1.width + r2.width) / 2;
  const dh = (r1.height + r2.height) / 2;
  const collision = { side: "", overlap: null };
  if (Math.abs(dx) < dw && Math.abs(dy) < dh) {
    collision.overlap = {
      x: dw - Math.abs(dx),
      y: dh - Math.abs(dy)
    };
    if (collision.overlap.x >= collision.overlap.y) {
      collision.side = dy > 0 ? "top" : "bottom";
    } else {
      collision.side = dx > 0 ? "left" : "right";
    }
  }
  collision.hit = Boolean(collision.side);
  return collision;
}
function overlap(r1, r2) {
  var isInHoriztonalBounds = r1.x < r2.x + r2.width && r1.x + r1.width > r2.x;
  var isInVerticalBounds = r1.y < r2.y + r2.height && r1.y + r1.height > r2.y;
  return isInHoriztonalBounds && isInVerticalBounds;
}
function getChildIndex(children, child) {
  return children.findIndex((o) => o.uid === child.uid);
}
function removeArrayElement(item, arr) {
  for (var i = arr.length; i >= 0; i--) {
    if (arr[i] === item) {
      arr.splice(i, 1);
      return arr;
    }
  }
  return arr;
}
function followConstant(follower, leader, speed, followX = true, followY = true) {
  var vx = leader.x - follower.x, vy = leader.y - follower.y, distance = Math.sqrt(vx * vx + vy * vy);
  if (distance >= speed) {
    if (followX) {
      follower.x += vx / distance * speed;
    }
    if (followY) {
      follower.y += vy / distance * speed;
    }
  }
}

// packages/display/DisplayObject.js
function renderProps(self, ctx) {
  const _x = self.x + self.width * self.pivotX;
  const _y = self.y + self.height * self.pivotY;
  ctx.setTransform(self.scaleX, 0, 0, self.scaleY, _x, _y);
}
function DisplayObject() {
  let _alpha = 1;
  let self = {
    x: 0,
    y: 0,
    alpha: 1,
    width: 0,
    height: 0,
    scaleX: 1,
    scaleY: 1,
    pivotX: 0,
    pivotY: 0,
    rotation: 0,
    visible: true,
    uid: getUID(),
    gx: 0,
    gy: 0,
    detach: () => {
      if (self.parent) {
        self.parent.remove(self);
      }
    },
    render: () => {
    },
    update: () => {
    }
  };
  Object.defineProperties(self, {
    alpha: {
      get: () => {
        return self.parent ? self.parent.alpha * _alpha : _alpha;
      },
      /**
       * @param {number} value
       */
      set: (value) => {
        _alpha = value;
      }
    },
    gx: {
      get: () => {
        return self.parent ? self.x + self.parent.gx : self.x;
      }
    },
    gy: {
      get: () => {
        return self.parent ? self.y + self.parent.gy : self.y;
      }
    }
  });
  return self;
}

// packages/display/AnimatedSprite.js
function renderTexture(ctx, texture, currentFrame, offsetX = 0, offsetY = 0) {
  const frames = texture.frames;
  const fw = texture.w;
  const palette = texture.palette;
  let frameData = frames.split("|")[currentFrame];
  frameData = frameData.replace(/(\D)(\d+)/g, (_, char, count) => char.repeat(count));
  [...frameData].forEach((c, i) => {
    const color = palette[c];
    if (color === void 0) {
      return;
    }
    const fx = i % fw;
    const fy = Math.floor(i / fw);
    ctx.fillStyle = color;
    ctx.fillRect(fx + offsetX, fy + offsetY, 1, 1);
  });
}
function AnimatedSprite(texture, play = true, loop = true) {
  const frames = texture.frames;
  const fps = texture.fps;
  const totalFrames = frames.split("|").length;
  const o = DisplayObject();
  const _detach = o.detach;
  let currentFrame = 0;
  let accumulator = 0;
  let playing = play;
  const buffers = Array.from({ length: totalFrames }, (_, i) => toCanvasPool(o.uid + "_" + i));
  const self = Object.assign(
    o,
    /** @type {TAnimatedSprite}*/
    {
      texture,
      loop,
      render: (ctx) => {
        if (!self.visible || !self.texture) {
          return;
        }
        const buffer = buffers[currentFrame];
        const bcanvas = buffer.canvas;
        const bctx = buffer.ctx;
        if (buffer.cached) {
          renderProps(self, ctx);
          ctx.drawImage(bcanvas, 0, 0);
          return;
        }
        buffer.cached = true;
        bcanvas.width = ctx.canvas.width;
        bcanvas.height = ctx.canvas.height;
        renderTexture(bctx, self.texture, currentFrame);
        renderProps(self, bctx);
      },
      update: () => {
        if (!playing) {
          return;
        }
        if (!self.loop && currentFrame == totalFrames - 1) {
          self.stop();
          if (self.onComplete) {
            self.onComplete(self.name);
          }
          return;
        }
        accumulator += ticker.timer.fdt;
        while (accumulator * fps >= 1) {
          currentFrame = ++currentFrame % totalFrames;
          accumulator -= 1 / fps;
        }
      },
      start: (frameIndex = 0) => {
        if (!self.playing) {
          reset();
          setCurrentFrame(frameIndex);
          playing = true;
        }
      },
      stop: (frameIndex) => {
        setCurrentFrame(frameIndex);
        playing = false;
      },
      destroy: () => {
        reset();
      },
      detach: () => {
        _detach();
        reset();
      }
    }
  );
  function reset() {
    self.stop();
    playing = false;
    currentFrame = 0;
    accumulator = 0;
  }
  function setCurrentFrame(frameIndex) {
    currentFrame = frameIndex !== void 0 ? frameIndex : currentFrame;
  }
  Object.defineProperties(self, {
    playing: {
      get: () => playing
    },
    currentFrame: {
      get: () => currentFrame
    },
    totalFrames: {
      get: () => totalFrames
    }
  });
  if (texture) {
    self.width = texture.w;
    self.height = texture.h;
  }
  return self;
}

// packages/display/Group.js
function Group() {
  let _calcWidth = 0;
  let _calcHeight = 0;
  let _children = [];
  const self = Object.assign(
    DisplayObject(),
    /** @type {TGroup}*/
    {
      children: _children,
      add: (child) => {
        if (child.parent) {
          child.detach();
        }
        child.parent = self;
        self.children.push(child);
        calculateSize();
      },
      addAt: (child, index) => {
        if (child.parent) {
          child.detach();
        }
        child.parent = self;
        _children.splice(index, 0, child);
        calculateSize();
      },
      swap: (child1, child2) => {
        if (child1.uid === child2.uid) return;
        const index1 = getChildIndex(_children, child1);
        const index2 = getChildIndex(_children, child2);
        if (index1 < 0 || index2 < 0) return;
        _children[index1] = child2;
        _children[index2] = child1;
      },
      remove: (child) => {
        if (child.parent && child.parent.uid === self.uid) {
          removeArrayElement(child, self.children);
          child.parent = null;
          calculateSize();
        }
      },
      removeAll: () => {
        _children.forEach((child) => {
          self.remove(child);
        });
        _children.length = 0;
        calculateSize();
      },
      render: (ctx) => {
        _children.forEach((child) => {
          ctx.globalAlpha = child.alpha;
          renderProps(self, ctx);
          if (child.render) {
            child.render(ctx);
          }
          if (self.onEachRender) {
            self.onEachRender(child);
          }
        });
      },
      update: () => {
        _children.forEach((child) => {
          if (child.update) {
            child.update();
          }
        });
      },
      destroy: () => {
        _children.forEach((child) => {
          if (child.destroy) {
            child.destroy();
          }
        });
        self.removeAll();
      }
    }
  );
  function calculateSize() {
    if (_children.length > 0) {
      _calcWidth = 0;
      _calcHeight = 0;
      _children.forEach((child) => {
        if (child.x + child.width > _calcWidth) {
          _calcWidth = child.x + child.width;
        }
        if (child.y + child.height > _calcHeight) {
          _calcHeight = child.y + child.height;
        }
      });
      self.width = _calcWidth;
      self.height = _calcHeight;
    }
  }
  return self;
}

// packages/display/MovieClip.js
function MovieClip(list) {
  var _a;
  let animations = {};
  let currentAnim;
  for (let name in list) {
    const data = list[name];
    const anim = AnimatedSprite(data.texture, false);
    anim.loop = (_a = data.loop) != null ? _a : anim.loop;
    anim.name = name;
    animations[name] = anim;
    currentAnim = anim;
  }
  const o = DisplayObject();
  const self = Object.assign(
    o,
    /** @type {TMovieClip}*/
    {
      render: (ctx) => {
        if (!self.visible || !currentAnim) {
          return;
        }
        currentAnim.render(ctx);
      },
      update: () => {
        currentAnim.update();
        updateAnimations();
      },
      play: (name, frameIndex) => {
        if (isAnimPlaying(name)) {
          return;
        }
        if (currentAnim) {
          currentAnim.stop();
          currentAnim.onComplete = null;
        }
        currentAnim = animations[name];
        currentAnim.onComplete = (name2) => {
          if (self.onComplete) {
            self.onComplete(name2);
          }
        };
        currentAnim.start(frameIndex);
      },
      stop: (frameIndex) => {
        if (currentAnim) {
          currentAnim.stop(frameIndex);
        }
      }
    }
  );
  function updateAnimations() {
    for (let name in animations) {
      const anim = animations[name];
      copyProps(self, anim);
    }
  }
  function isAnimPlaying(animName) {
    return currentAnim && currentAnim.playing && animName === currentAnim.name;
  }
  function copyProps(from, to) {
    const commonProps = [
      "x",
      "y",
      "alpha",
      "width",
      "height",
      "scaleX",
      "scaleY",
      "pivotX",
      "pivotY",
      "rotation",
      "visible"
    ];
    commonProps.forEach((key) => {
      to[key] = from[key];
    });
  }
  return self;
}

// packages/display/Rectangle.js
function Rectangle(x, y, width, height, color = "#000") {
  const o = DisplayObject();
  const self = Object.assign(
    o,
    /** @type {TRect}*/
    {
      color,
      x,
      y,
      width,
      height,
      render: (ctx) => {
        if (!self.visible) {
          return;
        }
        ctx.fillStyle = self.color;
        ctx.fillRect(self.x, self.y, self.width, self.height);
        renderProps(self, ctx);
      }
    }
  );
  return self;
}

// packages/display/Stage.js
function Stage() {
  const self = Object.assign(
    Group(),
    /** @type {TStage}*/
    {
      isStage: true,
      name: "stage"
    }
  );
  return self;
}

// packages/scene/Scene.js
function Scene() {
  const stage = Stage();
  let self = {
    uid: getUID(),
    stage,
    render: (ctx) => {
      stage.render(ctx);
    },
    update: () => {
      stage.update();
    },
    destroy: () => {
      stage.destroy();
    }
  };
  return self;
}

// packages/scene/SceneManager.js
function SceneManager() {
  let _scene;
  let self = {
    set: (scene) => {
      if (_scene) {
        _scene.destroy();
      }
      _scene = scene();
    },
    render: (ctx) => {
      const canvas = ctx.canvas;
      if (_scene) {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        _scene.render(ctx);
      } else {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      }
    },
    update: () => {
      if (_scene) {
        _scene.update();
      }
    },
    clear: () => {
      if (_scene) {
        _scene.destroy();
      }
      _scene = null;
    }
  };
  return self;
}

// packages/ticker/Ticker.js
function Ticker(props) {
  const fps = props && props.fps ? props.fps : 60;
  let startTime = performance.now();
  let accumulator = 0;
  let totalUpdatersUID = 0;
  let totalRenderersUID = 0;
  let fpsdt = 1e3 / fps;
  let maxStep = 0.05;
  let timeScale = 1;
  const timer = {
    dt: 0,
    fdt: 1 / fps,
    edt: 0,
    time: Number.MIN_VALUE
  };
  let updaters = {};
  let renderers = {};
  tick();
  function tick() {
    requestAnimationFrame(tick);
    const current = performance.now();
    timer.edt = current - startTime;
    startTime = current;
    timer.dt = Math.min(timer.edt, maxStep) * timeScale;
    timer.time += timer.dt;
    if (timer.edt > 1e3) {
      return;
    }
    accumulator += timer.edt;
    while (accumulator >= fpsdt) {
      update();
      accumulator -= fpsdt;
    }
    render();
  }
  function update() {
    for (let id in updaters) {
      updaters[id]();
    }
  }
  function render() {
    for (let id in renderers) {
      renderers[id]();
    }
  }
  function add(type, callback) {
    let total = type === "update" ? totalUpdatersUID : totalRenderersUID;
    const obj = type === "update" ? updaters : renderers;
    total += 1;
    if (!obj[total]) {
      obj[total] = callback;
    }
    if (type === "update") {
      totalUpdatersUID = total;
    } else {
      totalRenderersUID = total;
    }
    return total;
  }
  function remove(id, type) {
    const obj = type === "update" ? updaters : renderers;
    if (obj[id]) {
      delete obj[id];
    }
  }
  return {
    add,
    remove,
    timer
  };
}

// packages/timer/Timer.js
var timers = {};
function killTimers() {
  for (let key in timers) {
    if (timers[key]) {
      timers[key].kill();
    }
  }
}
function updateTimers() {
  for (let key in timers) {
    if (timers[key]) {
      timers[key]._update();
    }
  }
}
function Timer(duration = 0) {
  const uid = getUID();
  const tickerTimer = ticker.timer;
  let running = true;
  let base = tickerTimer.time;
  let last = tickerTimer.time;
  const self = {
    dt: 0,
    uid,
    _update: () => {
      last = tickerTimer.time;
    },
    kill: () => {
      running = false;
      delete timers[uid];
    },
    reset: () => {
      base = tickerTimer.time;
    }
  };
  Object.defineProperties(self, {
    dt: {
      get: () => tickerTimer.time - base - duration
    },
    running: {
      get: () => running
    }
  });
  timers[uid] = self;
  return self;
}
function IntervalTimer(duration, callback) {
  const self = Timer(duration);
  const _update = self._update;
  self._update = () => {
    if (self.running && self.dt > duration) {
      if (callback) callback();
      self.reset();
    }
    _update();
  };
  return self;
}
function WaitTimer(duration, callback) {
  const self = Timer(duration);
  const _update = self._update;
  const _kill = self.kill;
  self.kill = () => {
    _kill();
    if (callback) callback();
  };
  self._update = () => {
    if (self.running && self.dt > duration) {
      self.kill();
    }
    _update();
  };
  return self;
}

// src/const.js
var GAME_WIDTH = 96;
var GAME_HEIGHT = 96;

// src/Sound.js
var Sound = (() => {
  let isMusicPlaying = false;
  const A = new AudioContext();
  const G = A.createGain();
  const musicAudioContexts = [];
  const musicTimers = [];
  let focused = true;
  window.addEventListener("focus", () => {
    focused = true;
    pauseMusic(false);
  });
  window.addEventListener("blur", () => {
    focused = false;
    pauseMusic();
  });
  function t(i, n) {
    return (n - i) / n;
  }
  function _audio(soundFx, volume) {
    G.gain.value = volume || 1;
    G.connect(A.destination);
    const m = A.createBuffer(1, 96e3, 48e3);
    const b = m.getChannelData(0);
    for (var i = 96e3; i--; ) b[i] = soundFx(i);
    const s = A.createBufferSource();
    s.buffer = m;
    s.connect(G);
    s.start();
  }
  function _fxPunch(i) {
    var n = 2e4;
    if (i > n) return null;
    var q = t(i, n);
    return Math.pow(i * 30, 0.3) & 33 ? q : -q;
  }
  function _fxPistol(i) {
    var n = 2e4;
    if (i > n) return null;
    var q = t(i, n);
    return Math.pow(i * 5e5, 0.3) & 33 ? q : -q;
  }
  function _fxTele(i) {
    var n = 2e4;
    if (i > n) return null;
    var q = t(i, n);
    i = i * 0.7;
    return Math.pow(i * 50, 0.8) & 133 ? q : -q;
  }
  function _fxSpawnD(i) {
    var n = 13e3;
    var c = n / 3;
    if (i > n) return null;
    var q = Math.pow(t(i, n), 3.1);
    return Math.pow(i, 1.08) & (i < c ? 98 : 99) ? q : -q;
  }
  function _fxSuperT(i) {
    var n = 25e3;
    if (i > n) return null;
    return ((i ^ i >> 3 ^ i * i * 7.3 ^ i << 4) & 65535) / 65536 * t(i, n);
  }
  function _fxPick(i) {
    i = i * 1.4;
    var n = 2e4;
    if (i > n) return null;
    return (Math.pow(i, 1.055) & 130 ? 1 : -1) * Math.pow(t(i, n), 2);
  }
  function _fxWin(i) {
    var notes = [0, 4, 7, 12, void 0, 7, 12];
    var n = 35e3;
    if (i > n) return null;
    var idx = notes.length * i / n | 0;
    var note = notes[idx];
    if (note === void 0) return 0;
    var r = Math.pow(2, note / 12) * 0.8;
    var q = t(i * notes.length % n, n);
    return i * r & 64 ? q : -q;
  }
  function _fxLanded(i) {
    return 0.8 * (Math.random() * 2 - 1) * Math.exp(-i / 800);
  }
  function createMusic(notes, center, duration, decaystart, decayduration, interval, volume, waveform, i) {
    const musicAC = new AudioContext();
    const musicGain = musicAC.createGain();
    notes.forEach(function(note) {
      var O = musicAC.createOscillator();
      if (O) {
        O.connect(musicGain);
        musicGain.connect(musicAC.destination);
        O.start(note[0] * interval);
        O.frequency.setValueAtTime(center * 1.06 ** (13 - note[1]), note[0] * interval);
        O.type = waveform;
        musicGain.gain.setValueAtTime(volume, note[0] * interval);
        musicGain.gain.setTargetAtTime(1e-5, note[0] * interval + decaystart, decayduration);
        O.stop(note[0] * interval + duration);
      }
    });
    musicAudioContexts.push(musicAC);
  }
  function play(name) {
    var soundFx = null;
    switch (name) {
      case "fxPistol":
        soundFx = _fxPistol;
        break;
      case "fxTele":
        soundFx = _fxTele;
        break;
      case "fxSpawnD":
        soundFx = _fxSpawnD;
        break;
      case "fxSuperT":
        soundFx = _fxSuperT;
        break;
      case "fxPunch":
        soundFx = _fxPunch;
        break;
      case "fxPick":
        soundFx = _fxPick;
        break;
      case "fxWin":
        soundFx = _fxWin;
        break;
      case "fxLanded":
        soundFx = _fxLanded;
        break;
    }
    if (!soundFx) {
      return;
    }
    var volume = name === "fxPunch" ? 0.2 : 0.5;
    _audio(soundFx, volume);
  }
  function music() {
    if (isMusicPlaying) {
      return;
    }
    isMusicPlaying = true;
    startMusic();
  }
  function startMusic() {
    const timer = setTimeout(() => loopMusic(3700), 1e3);
    musicTimers.push(timer);
  }
  function killMusic() {
    musicAudioContexts.forEach((a) => a.close());
    musicAudioContexts.length = 0;
    musicTimers.forEach((a) => clearTimeout(a));
    musicTimers.length = 0;
    isMusicPlaying = false;
  }
  function pauseMusic(pause = true) {
    musicAudioContexts.forEach((a) => pause ? a.suspend() : a.resume());
  }
  function loopMusic(loopInterval) {
    killMusic();
    createMusic([[7, 11], [2, 23], [5, 13], [3, 11], [4, 11], [6, 11], [8, 23], [7, 23], [10, 23], [9, 13], [11, 11], [12, 11], [13, 13], [15, 11], [14, 11], [17, 13], [15, 23], [16, 23], [18, 23], [21, 11], [22, 11], [17, 20], [19, 23], [23, 13], [23, 20], [24, 11], [25, 11], [26, 13], [27, 11], [28, 11], [25, 23], [27, 23], [29, 20], [20, 13], [0, 23], [1, 20], [3, 23]], 100, 0.18, 0.1, 5e-3, 0.2, 0.03, "sawtooth");
    if (!focused) pauseMusic();
    const loopTimer = setTimeout(() => loopMusic(loopInterval), loopInterval);
    musicTimers.push(loopTimer);
  }
  return {
    play,
    music,
    killMusic
  };
})();

// media/enemyMojoAssets.js
var MOJO_DIG = {
  w: 8,
  h: 8,
  frames: "$27A1B2$5C2B1$4D1C3$4D1E2D2$2D1E4D1$1|$35A1B2$5C2B1$4D1C3$4D1E2D2$1|$51A1B2$5C2B1$2",
  palette: { "A": "#333c57", "B": "#b13e53", "C": "#a7f070", "D": "#ffcd75", "E": "#257179" },
  fps: 8
};
var MOJO_RISE = {
  w: 8,
  h: 8,
  frames: "$51A1B2$5C2B1$2|$35A1B2$5C2B1$4D1C3$4D1E2D2$1|$27A1B2$5C2B1$4D1C3$4D1E2D2$2D1E4D1$1",
  palette: { "A": "#333c57", "B": "#b13e53", "C": "#a7f070", "D": "#ffcd75", "E": "#257179" },
  fps: 8
};
var MOJO_RUN = {
  w: 8,
  h: 8,
  frames: "$3A1B2$5C2B1$4D1C3$4D1E2D2$2D1E4D1$2D1E4D1$2D1E1$2E1D1$2E1$4E1$1|$4A1B2$5C2B1$3D2C3$2D1E4D2$1D1E4$1D1$1D2E3$1D1$2E1$2E1$4E1$2E1$2|$1A1B2$5C2B1$5C3$5D1E2D3$2D1E4$1D2$1E4$4E2$1E1$5F1E1$3|$2A1B2$5C2B1$5C3$4D2E2D3$1D1E4$3D1E4$3D1E1$2E1$4E1$1E1$3|$2A1B2$5C2B1$5C3$4D2E2D3$1D1E4$3D1E4$3D1E1$2E1$4E1$1E1$3",
  palette: { "A": "#333c57", "B": "#b13e53", "C": "#a7f070", "D": "#ffcd75", "E": "#257179", "F": "#29366f" },
  fps: 8
};

// media/enemyRyanAssets.js
var RYAN_DIG = {
  w: 8,
  h: 8,
  frames: "$35A1B2$4A1C1B2$4A1C1$1C1$4D1C1D1C1$2|$43A1B2$4A1C1B2$4A1C1$1C1$2|$51A1B2$4A1C1B2$2",
  palette: { "A": "#38b764", "B": "#a7f070", "C": "#ffcd75", "D": "#257179" },
  fps: 8
};
var RYAN_RISE = {
  w: 8,
  h: 8,
  frames: "$51A1B2$4A1C1B2$2|$43A1B2$4A1C1B2$4A1C1$1C1$2|$35A1B2$4A1C1B2$4A1C1$1C1$4D1C1D1C1$2",
  palette: { "A": "#38b764", "B": "#a7f070", "C": "#ffcd75", "D": "#257179" },
  fps: 8
};
var RYAN_RUN = {
  w: 8,
  h: 8,
  frames: "$12A2$5B1A2$5C1B1C2$4C1B1$1C1$4C1D1$5D1$2D1$4D1$2D1$2|$19B1A2$4B1C1A2$4B1C1$1C1$4D1C1D1C1$3D1$2D1C1$2D1$3D1$3|$12D2$5B1C1D1$5B2C2$4B2$1C1$4D2$5D2$1D1$4D1$2D1$2|$20A2$5C1A2$5C1B1C1$5C1D1C1$4D3C1$3D1$2D1$3",
  palette: { "A": "#a7f070", "B": "#38b764", "C": "#ffcd75", "D": "#257179" },
  fps: 8
};

// media/enemyThorAssets.js
var THOR_DIG = {
  w: 8,
  h: 8,
  frames: "$27A2$5B1C1A1$5D1B2D3$2D1B2$5D1E2$3|$35A2$5B1C1A1$5D1B2D2$3D1B2$3|$51A2$5B1C1A1$3",
  palette: { "A": "#b13e53", "B": "#38b764", "C": "#a7f070", "D": "#ffcd75", "E": "#257179" },
  fps: 8
};
var THOR_RISE = {
  w: 8,
  h: 8,
  frames: "$51A2$5B1C1A1$3|$35A2$5B1C1A1$5D1B2D2$3D1B2$3|$27A2$5B1C1A1$5D1B2D3$2D1B2$5D1E2$3",
  palette: { "A": "#b13e53", "B": "#38b764", "C": "#a7f070", "D": "#ffcd75", "E": "#257179" },
  fps: 8
};
var THOR_RUN = {
  w: 8,
  h: 8,
  frames: "$11A2$5B1C1A1$5D1B2D3$2D1B2$5D1E2$5E1$1E1$5D1$1D1$3|$3A2$5B1C1A1D1$4D1B2$1D2$1D1B3$4D1B3$5E4$3D1E1$2D1$10|$11A2$6C1A1$2D1$2D1B2D2$3D1B2$5D1B2$5E3$7D1$3|$3A2$5B1C1A1$4D2B2D3$1D1B3$5B3$5E3$6D1$12",
  palette: { "A": "#b13e53", "B": "#38b764", "C": "#a7f070", "D": "#ffcd75", "E": "#257179" },
  fps: 8
};

// src/entities/Actor.js
function Actor(name, width = 0, height = 0, color = "#fff") {
  const body = Rectangle(0, 0, width, height, color);
  body.name = `${name}.body`;
  const self = {
    uid: getUID(),
    name,
    width,
    height,
    health: 1,
    alpha: 1,
    x: 0,
    y: 0,
    vx: 0,
    vy: 0,
    speedX: 0.8,
    jForce: 2.8,
    flipH: 1,
    dGravity: 0.5,
    jGravity: 0.2,
    gravity: 0.5,
    body,
    addTo: (group, index) => {
      if (index !== void 0) {
        group.addAt(self.body, index);
        group.addAt(self.skin, index);
      } else {
        group.add(self.body);
        group.add(self.skin);
      }
      self.parent = group;
    },
    setVisible: (bodyVisible, skinVisible) => {
      self.body.visible = bodyVisible;
      self.skin.visible = skinVisible;
    },
    setBody: (width2, height2, color2) => {
      self.body.width = width2;
      self.body.height = height2;
      self.body.color = color2 ? color2 : self.body.color;
    },
    update: () => {
      self.body.update();
      updateSkin();
      updateVelocity();
    },
    render: (ctx) => {
      self.body.render(ctx);
      self.skin.render(ctx);
    },
    addSkin: (list) => {
      self.skin = MovieClip(list);
      self.skin.name = `${name}.skin`;
    },
    vsPlatforms: (colliders, group) => {
      colliders.forEach((platform) => {
        var r1 = self.body;
        var r2 = platform;
        var test = hitTest(r1, r2);
        if (test.hit) {
          if (test.side === "bottom") {
            self.grounded = true;
            self.gravity = self.dGravity;
            self.y = self.y - test.overlap.y;
            self.resetVy();
          } else if (test.side === "top") {
            self.y = self.y + test.overlap.y;
            self.resetVy();
          } else if (test.side === "right") {
            self.x = self.x - test.overlap.x;
            self.vx -= self.speedX;
          } else if (test.side === "left") {
            self.x = self.x + test.overlap.x;
            self.vx += self.speedX;
          }
        }
      });
    },
    vsHurts: (colliders, group) => {
      for (let i = 0; i < colliders.length; i++) {
        const hurt = colliders[i];
        const r1 = self.body;
        const r2 = hurt;
        const hit = overlap(r1, r2);
        if (hit) {
          self.receiveDamage(1, hurt);
          break;
        }
      }
    },
    addSfx: (type) => {
      const mc = root.sfxPool.get(type);
      if (!mc) {
        return;
      }
      self.parent.add(mc);
      mc.x = self.x + self.width / 2 - mc.width / 2;
      mc.y = self.y + self.height - mc.height;
      mc.start(0);
    },
    explode: (type) => {
      const mc = root.dexpPool.get(type);
      if (!mc) {
        return;
      }
      mc.addTo(self.x, self.y, self.parent);
    },
    receiveDamage: (amount, from) => {
      if (self.dead) {
        return;
      }
      self.health -= amount;
      if (self.health <= 0) {
        self.health = 0;
        self.kill();
      }
    },
    doFlipH: () => {
      self.flipH *= -1;
    },
    kill: () => {
      self.dead = true;
    },
    reset: () => {
      if (self.skin) {
        self.skin.stop();
      }
      self.parent = null;
      self.flipH = 1;
      self.health = 1;
      self.dead = false;
      self.moving = false;
      self.grounded = false;
      self.jumping = false;
      self.falling = false;
      self.attacking = false;
      self.resetVx();
      self.resetVy();
      self.resetGravity();
    },
    detach: () => {
      self.skin.stop();
      self.skin.detach();
      self.body.detach();
      self.parent = null;
      self.reserved = false;
    },
    resetVx: () => {
      self.vx = 0;
    },
    resetVy: () => {
      self.vy = 0;
    },
    voidGravity: () => {
      self.gravity = 0;
    },
    resetGravity: () => {
      self.gravity = self.dGravity;
    },
    isFlipH: () => {
      return self.flipH === -1;
    },
    onLanded: () => {
    }
  };
  function updateSkin() {
    const skin = self.skin;
    if (skin) {
      skin.scaleX = self.flipH;
      if (self.isFlipH()) {
        skin.x = self.body.x + self.body.width;
      } else {
        skin.x = self.body.x;
      }
      skin.y = self.body.y;
      skin.update();
    }
  }
  function updateVelocity() {
    self.vy += self.gravity;
    self.y += self.vy;
    self.x += self.vx;
    if (!self.grounded && self.vy > 0) {
      self.falling = true;
    }
    if (self.grounded && self.falling) {
      self.onLanded();
      self.falling = false;
    }
  }
  Object.defineProperties(self, {
    x: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.x = value;
      },
      get: () => {
        return self.body.x;
      }
    },
    y: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.y = value;
      },
      get: () => {
        return self.body.y;
      }
    },
    width: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.width = value;
      },
      get: () => {
        return self.body.width;
      }
    },
    height: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.height = value;
      },
      get: () => {
        return self.body.height;
      }
    },
    active: {
      get: () => {
        return self.skin.parent && self.body.parent && !self.dead && self.skin.visible;
      }
    }
  });
  return self;
}

// src/entities/Enemy.js
var ENEMIES_SKIN = {
  mojo: {
    dig: MOJO_DIG,
    rise: MOJO_RISE,
    run: MOJO_RUN
  },
  ryan: {
    dig: RYAN_DIG,
    rise: RYAN_RISE,
    run: RYAN_RUN
  },
  thor: {
    dig: THOR_DIG,
    rise: THOR_RISE,
    run: THOR_RUN
  }
};
function Enemy(name, width, height, color) {
  let currentState;
  let _triggerState;
  const o = Actor(name, width, height, color);
  const _detach = o.detach;
  const _update = o.update;
  const _kill = o.kill;
  const self = Object.assign(
    o,
    /** @type {TEnemy}*/
    {
      type: name.split("_")[0],
      update: () => {
        _update();
        updateMovement();
        self.watchFlip();
      },
      changeState: (state) => {
        currentState = state;
        if (!_triggerState) {
          self.reserved = false;
        }
        switch (state) {
          case "dig":
            doDig();
            break;
          case "rise":
            doRise();
            break;
        }
      },
      watchFlip: () => {
        if (!self.isFlipH()) {
          if (self.skin.scaleX < 0) {
            self.skin.scaleX *= -1;
          }
        } else {
          if (self.skin.scaleX > 0) {
            self.skin.scaleX *= -1;
          }
        }
      },
      vsReversers: (colliders, group) => {
        colliders.forEach((reverser) => {
          const r1 = self.body;
          const r2 = reverser;
          const test = hitTest(r1, r2);
          if (test.hit) {
            if (test.side === "right") {
              self.x = self.x - test.overlap.x;
              self.vx -= self.speedX;
            } else if (test.side === "left") {
              self.x = self.x + test.overlap.x;
              self.vx += self.speedX;
            }
            self.doFlipH();
          }
        });
      },
      vsHiders: (colliders, group) => {
        if (currentState === "dig") {
          return;
        }
        for (let i = 0; i < colliders.length; i++) {
          const hider = colliders[i];
          const r1 = self.body;
          const r2 = hider;
          const hit = overlap(r1, r2);
          if (hit) {
            self.changeState("dig");
            break;
          }
        }
      },
      vsPlayer: (player, group) => {
        const r1 = self.body;
        const r2 = player.body;
        const hit = overlap(r1, r2);
        if (hit) {
          player.receiveDamage(1, self);
        }
      },
      waitForTrigger: (triggerState) => {
        _triggerState = triggerState;
        self.setVisible(false, false);
      },
      onTrigger: (from, initialFlipH, isPlaySound = true) => {
        self.flipH = initialFlipH;
        self.changeState(_triggerState);
        self.skin.visible = true;
        _triggerState = null;
        if (isPlaySound) {
          Sound.play("fxSuperT");
        }
      },
      disappear: () => {
        self.dead = true;
        self.detach();
      },
      kill: () => {
        _kill();
        self.setVisible(false, false);
        self.explode("enemy");
        WaitTimer(1, self.detach);
      },
      detach: () => {
        if (!self.parent) {
          return;
        }
        _detach();
        _triggerState = null;
      },
      isToBeTriggered: () => {
        return !self.dead && _triggerState && self.parent;
      }
    }
  );
  const _skins = ENEMIES_SKIN[self.type];
  self.speedX = getSpeedX();
  self.addSkin({
    // key should match TEnemySkinType
    dig: { texture: _skins.dig, loop: false },
    rise: { texture: _skins.rise, loop: false },
    run: { texture: _skins.run, loop: true }
  });
  self.skin.stop();
  self.skin.onComplete = (animName) => {
    if (animName === "rise") {
      self.changeState("run");
    }
    if (animName === "dig") {
      self.disappear();
    }
  };
  function updateMovement() {
    if (currentState === "run") {
      doRun();
    }
  }
  function doRise() {
    self.moving = false;
    self.resetVx();
    self.skin.play("rise");
    self.addSfx("emergeDusts");
  }
  function doDig() {
    self.moving = false;
    self.resetVx();
    self.skin.play("dig");
    self.addSfx("emergeDusts");
  }
  function doRun() {
    if (self.grounded) {
      self.moving = true;
      self.vx = self.flipH * self.speedX;
    }
    self.skin.play("run");
  }
  function getSpeedX() {
    switch (self.type) {
      case "mojo":
        return 0.2;
      case "ryan":
        return 0.3;
      case "thor":
        return 0.4;
      default:
        return 0.5;
    }
  }
  return self;
}

// media/playerAssets.js
var PLAYER_IDLE = {
  w: 8,
  h: 8,
  frames: "$21A2$6A2$3B3A1$4B3A1$4B3A1$3A5$2|$26B3$5B3A2$3B3A2$3A4$3A5$2",
  palette: { "A": "#ffcd75", "B": "#b13e53" },
  fps: 5
};
var PLAYER_RUN = {
  w: 8,
  h: 8,
  frames: "$27A3$5A3B2$2A4B2$2A1B4$2B5$2|$22B2$4A2B2$2A4B1$3A4B1$3A4B1$1B7$1|$26A4$4A3B2$3A3B2$3A3B1$3B5$2|$21B2$6B2$3A3B1$4A3B1$4A3B1$4B4$2",
  palette: { "A": "#b13e53", "B": "#ffcd75" },
  fps: 8
};
var PLAYER_JUMP = {
  w: 8,
  h: 8,
  frames: "$13A2$6A2$6A2$3B3A1$4B3A1$4B3A1$4B3$3",
  palette: { "A": "#ffcd75", "B": "#b13e53" },
  fps: 1
};
var PLAYER_HURT = {
  w: 8,
  h: 8,
  frames: "$11A2$6A2$7B1A1$4B3A1$4B3A1$4B3A1$7A2$1",
  palette: { "A": "#ffcd75", "B": "#b13e53" },
  fps: 1
};
var PLAYER_THROW = {
  w: 8,
  h: 8,
  frames: "$20A2$3B3A1C1$3B3A2$3B3A1$5A3$5A3$3|$13A3$5A1C2$2B3A1$4B3A1$4B3A1C2$2B3A3$1A5$2",
  palette: { "A": "#ffcd75", "B": "#b13e53", "C": "#ef7d57" },
  fps: 8
};
var PLAYER_SHOOT_LASER = {
  w: 8,
  h: 8,
  frames: "$20A2$3B3A1C1$3B3A2$3B3A1$5A3$5A3$3|$20A2$3B3A1C1$3B3A2$3B3A1$5A3$5A3$3|$13A3$5A1C2$2B3A1$4B3A1$4B3A1C2$2B3A3$1A5$2|$13A3$5A1C2$2B3A1$4B3A1$4B3A1C2$2B3A3$1A5$2|$20A2$3B3A1C1$3B3A2$3B3A1$5A3$5A3$3|$13A3$5A1C2$2B3A1$4B3A1$4B3A1C2$2B3A3$1A5$2|$20A2$3B3A1C1$3B3A2$3B3A1$5A3$5A3$3|$13A3$5A1C2$2B3A1$4B3A1$4B3A1C2$2B3A3$1A5$2|$13A3$5A1C2$2B3A1$4B3A1$4B3A1C2$2B3A3$1A5$2",
  palette: { "A": "#ffcd75", "B": "#b13e53", "C": "#ef7d57" },
  fps: 12
};

// src/entities/Player.js
function Player(name, width, height, color) {
  let didJumpAttack = false;
  let currentState;
  const powers = [];
  const jumpSpeedX = 0.8;
  const runSpeedX = 0.3;
  const o = Actor(name, width, height, color);
  const _addTo = o.addTo;
  const _update = o.update;
  const _kill = o.kill;
  const self = Object.assign(
    o,
    /** @type {TPlayer}*/
    {
      powers,
      addTo: (group, index) => {
        _addTo(group, index);
        self.setVisible(false, true);
        syncPowers();
      },
      update: () => {
        _update();
        updateMovement();
      },
      syncPowers,
      changeState: (state) => {
        currentState = state;
        switch (state) {
          case "idle":
            doIdle();
            break;
          case "run":
            doRun();
            break;
          case "jump":
            doJump();
            break;
          case "hurt":
            doHurt();
            break;
          case "attack":
            doAttack();
            break;
        }
      },
      vsEnemyTriggers: (colliders, enemies, group) => {
        colliders.forEach((trigger, index) => {
          const r1 = self.body;
          const r2 = (
            /** @type {TRect}*/
            trigger
          );
          const hit = overlap(r1, r2);
          if (hit) {
            let nodes = trigger.nodes;
            enemies.forEach((enemy) => {
              if (enemy.isToBeTriggered()) {
                for (let i = 0; i < nodes.length; i++) {
                  const pos = nodes[i];
                  if (pos.x === enemy.x && pos.y === enemy.y) {
                    const eFlipH = enemy.x > self.x ? -1 : 1;
                    enemy.onTrigger(trigger, eFlipH);
                    trigger.register(index);
                    break;
                  }
                }
              }
            });
          }
          if (trigger.isJobDone()) {
            const triggerIndex = getChildIndex(colliders, trigger);
            colliders.splice(triggerIndex, 1);
            trigger.kill();
          }
        });
      },
      vsDoors: (colliders, group) => {
        for (let i = 0; i < colliders.length; i++) {
          const hurt = colliders[i];
          const r1 = self.body;
          const r2 = hurt;
          const hit = overlap(r1, r2);
          if (hit) {
            root.scene.next();
            break;
          }
        }
      },
      kill: () => {
        _kill();
        self.setVisible(false, false);
        Sound.play("fxPunch");
        self.explode("player");
        WaitTimer(1, onKill);
      }
    }
  );
  function onKill() {
    self.detach();
    root.scene.reload();
  }
  assignPowers();
  self.addSkin({
    // key should match TPlayerSkinType
    idle: { texture: PLAYER_IDLE },
    run: { texture: PLAYER_RUN },
    jump: { texture: PLAYER_JUMP, loop: false },
    hurt: { texture: PLAYER_HURT, loop: false },
    shootLaser: { texture: PLAYER_SHOOT_LASER, loop: false },
    throw: { texture: PLAYER_THROW, loop: false }
  });
  self.skin.play("idle");
  self.skin.onComplete = (animName) => {
    const isAttackAnim = animName === "throw" || animName === "shootLaser";
    if (isAttackAnim) {
      self.attacking = false;
      self.gravity = self.jumping ? self.jGravity : self.dGravity;
    }
  };
  self.onLanded = () => {
    self.addSfx("impactDusts");
    Sound.play("fxLanded");
  };
  btn.is("jump").onDown = onJump;
  btn.is("attack").onDown = onAttack;
  btn.is("select").onDown = onSelect;
  function updateMovement() {
    if (btn.is("right").down) {
      if (!self.attacking) {
        self.flipH = 1;
        self.changeState("run");
      }
    } else if (btn.is("left").down) {
      if (!self.attacking) {
        self.flipH = -1;
        self.changeState("run");
      }
    } else {
      if (self.grounded && !self.attacking) {
        self.changeState("idle");
      }
    }
    if (self.grounded) {
      self.jumping = false;
      didJumpAttack = false;
    }
    if (self.attacking) {
      self.resetVx();
      self.resetVy();
      self.voidGravity();
    }
  }
  function doIdle() {
    self.moving = false;
    self.resetVx();
    self.skin.play("idle");
  }
  function doRun() {
    if (!self.jumping) {
      self.speedX = runSpeedX;
    }
    self.moving = true;
    self.vx = self.flipH * self.speedX;
    if (self.grounded) {
      self.skin.play("run");
    }
  }
  function doJump() {
    self.speedX = jumpSpeedX;
    self.jumping = true;
    self.grounded = false;
    self.gravity = self.jGravity;
    self.vy -= self.jForce;
    self.skin.play("jump");
    Sound.play("fxSpawnD");
  }
  function doHurt() {
    self.skin.play("hurt");
  }
  function doAttack() {
    const attackType = self.currentPower.name;
    let animName = "throw";
    self.attacking = true;
    if (self.jumping && !didJumpAttack) {
      didJumpAttack = true;
    }
    addPower(attackType);
    if (attackType === "laserBeam") {
      animName = "shootLaser";
    }
    self.skin.play(animName);
  }
  function addPower(type) {
    switch (type) {
      case "fireball": {
        const mc = root.powerPool.get(type);
        if (!mc) {
          return;
        }
        mc.addTo(self.parent);
        mc.x = self.x + width / 2 - mc.width / 2;
        mc.y = self.y;
        mc.flipH = self.flipH;
        mc.play();
        Sound.play("fxPunch");
        decreasePower();
        break;
      }
      case "laserBeam": {
        const mc = root.powerPool.get(type);
        if (!mc) {
          return;
        }
        mc.addTo(self.parent);
        mc.flipH = self.flipH;
        mc.scaleX = self.flipH;
        const offsetX = 2;
        mc.x = !self.isFlipH() ? self.x + self.width - offsetX : self.x - mc.width + offsetX;
        mc.y = self.y;
        mc.play();
        Sound.play("fxPistol");
        decreasePower();
        break;
      }
    }
  }
  function assignPowers() {
    powers.length = 0;
    powers.push(store.fireBall);
    powers.push(store.laserBeam);
    self.currentPower = powers[0];
  }
  function syncPowers() {
    if (!powers.length) {
      return;
    }
    powers[0] = store.fireBall;
    powers[1] = store.laserBeam;
    if (!self.currentPower.total) {
      onSelect();
    }
  }
  function increasePower(name2) {
    const power = powers.filter((obj) => obj.name === name2)[0];
    let total = power.total;
    total += 1;
    if (total > power.max) {
      total = power.max;
    }
    power.total = total;
  }
  function decreasePower() {
    let total = self.currentPower.total;
    total -= 1;
    if (total < 0) {
      total = 0;
    }
    self.currentPower.total = total;
    if (!self.currentPower.total) {
      for (let i = 0; i < powers.length; i++) {
        const power = powers[i];
        if (power.total) {
          setCurrentPower(i);
          break;
        }
      }
    }
  }
  function onSelect() {
    if (self.dead) {
      return;
    }
    let powerIndex = powers.indexOf(self.currentPower);
    powerIndex += 1;
    const capIndex = () => {
      if (powerIndex >= powers.length) {
        powerIndex = 0;
      }
    };
    powers.forEach((power, id) => {
      if (id === powerIndex && power.total === 0) {
        powerIndex += 1;
        capIndex();
      }
    });
    capIndex();
    setCurrentPower(powerIndex);
  }
  function setCurrentPower(powerIndex = 0) {
    const _currentPower = self.powers[powerIndex];
    if (!_currentPower.total) {
      return;
    }
    self.currentPower = self.powers[powerIndex];
    store.currentPowerName = self.currentPower.name;
  }
  function onJump() {
    if (self.jumping) {
      return;
    }
    if (self.grounded && !self.attacking) {
      self.changeState("jump");
    }
  }
  function onAttack() {
    if (self.dead) {
      return;
    }
    if (self.attacking || didJumpAttack || self.currentPower.total === 0) {
      return;
    }
    self.changeState("attack");
  }
  return self;
}

// src/entities/ActorPool.js
function ActorPool() {
  let player;
  let enemies = {};
  const self = {
    init: () => {
      self.initPlayer();
      self.initEnemies();
    },
    initPlayer: () => {
      player = Player("hero", 8, 8);
    },
    initEnemies: () => {
      addToBasket("mojo", { max: 8, pool: [] });
      addToBasket("ryan", { max: 8, pool: [] });
      addToBasket("thor", { max: 8, pool: [] });
      for (let name in enemies) {
        const bname = (
          /** @type {TEnemyType}*/
          name
        );
        const props = enemies[bname];
        const max = props.max;
        const pool2 = props.pool;
        for (let i = 0; i < max; i++) {
          const id = `${name}_${i}`;
          const enemy = Enemy(id, 8, 8);
          pool2.push(enemy);
        }
      }
    },
    getPlayer: () => {
      let _player;
      if (!player.active) {
        _player = player;
      }
      return _player;
    },
    getEnemy: (name) => {
      const pool2 = enemies[name].pool;
      let extractedEnemy = null;
      for (let i = 0; i < pool2.length; i++) {
        const enemy = pool2[i];
        if (!enemy.active && !enemy.reserved) {
          extractedEnemy = enemy;
          enemy.reserved = true;
          break;
        }
      }
      return extractedEnemy;
    },
    detach: () => {
      player.detach();
      player.reset();
      for (let name in enemies) {
        const bname = (
          /** @type {TEnemyType}*/
          name
        );
        const props = enemies[bname];
        const pool2 = props.pool;
        pool2.forEach((enemy) => {
          enemy.reserved = false;
          enemy.detach();
          enemy.reset();
        });
      }
    }
  };
  self.init();
  function addToBasket(name, data) {
    enemies[name] = data;
  }
  return self;
}

// media/bloodAssets.js
var PLAYER_BLOOD = {
  w: 1,
  h: 1,
  frames: "A|B|C",
  palette: { "A": "#5d275d", "B": "#b13e53", "C": "#ef7d57" },
  fps: 1
};
var ENEMY_BLOOD = {
  w: 1,
  h: 1,
  frames: "A|B|C",
  palette: { "A": "#29366f", "B": "#257179", "C": "#38b764" },
  fps: 1
};

// packages/utils/math.js
function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function mapNumber(value, fromMin, fromMax, toMin, toMax) {
  return toMin + (toMax - toMin) * ((value - fromMin) / (fromMax - fromMin));
}

// src/entities/DeathExplosionParticle.js
function DeathExplosionParticle(texture, x, y) {
  const skin = AnimatedSprite(texture, false, false);
  skin.name = "death-explosion";
  const frameIndex = randomInt(0, skin.totalFrames - 1);
  skin.start(frameIndex);
  const body = Rectangle(0, 0, texture.w, texture.h, "ff0000");
  body.name = skin.name + ".body";
  body.visible = false;
  let alpha = 1;
  const self = {
    uid: getUID(),
    speedX: 0.1,
    dg: 0.1,
    g: 0.1,
    x,
    y,
    vx: 0,
    vy: 0,
    alpha,
    addTo: (group, index) => {
      if (index !== void 0) {
        group.addAt(body, index);
        group.addAt(skin, index);
      } else {
        group.add(body);
        group.add(skin);
      }
      self.parent = group;
    },
    update: (platforms, hurts) => {
      skin.x = body.x;
      skin.y = body.y;
      body.update();
      skin.update();
      self.vy += self.g;
      self.y += self.vy;
      if (!self.grounded) {
        self.x += self.vx;
      } else {
        resetVx();
      }
      if (platforms && platforms.length) {
        vsPlatforms(platforms);
      }
      if (hurts && hurts.length) {
        vsPlatforms(hurts);
      }
    },
    render: (ctx) => {
      body.render(ctx);
      skin.render(ctx);
    },
    kill: () => {
      skin.detach();
      body.detach();
      self.parent = null;
      self.reserved = false;
      resetVx();
      resetVy();
    }
  };
  body.x = self.x;
  body.y = self.y;
  self.vx = (Math.random() * 2 - 1) * self.speedX;
  self.vy = Math.random() * -(self.vy - 2) * Math.cos(Math.abs(self.vx) / self.speedX) - 2;
  function resetVx() {
    self.vx = 0;
  }
  function resetVy() {
    self.vy = 0;
  }
  function vsPlatforms(colliders) {
    colliders.forEach((platform) => {
      var r1 = body;
      var r2 = platform;
      var test = hitTest(r1, r2);
      if (test.hit) {
        if (test.side === "bottom") {
          self.grounded = true;
          self.g = self.dg;
          self.y = self.y - test.overlap.y;
          resetVy();
        } else if (test.side === "top") {
          self.y = self.y + test.overlap.y;
          resetVy();
        } else if (test.side === "right") {
          self.x = self.x - test.overlap.x;
          self.vx -= self.speedX;
        } else if (test.side === "left") {
          self.x = self.x + test.overlap.x;
          self.vx += self.speedX;
        }
      }
    });
  }
  Object.defineProperties(self, {
    x: {
      /**
       * @param {number} value
       */
      set: (value) => {
        body.x = value;
      },
      get: () => {
        return body.x;
      }
    },
    y: {
      /**
       * @param {number} value
       */
      set: (value) => {
        body.y = value;
      },
      get: () => {
        return body.y;
      }
    },
    alpha: {
      /**
       * @param {number} value
       */
      set: (value) => {
        skin.alpha = value;
        alpha = value;
      },
      get: () => {
        return alpha;
      }
    },
    active: {
      get: () => {
        return Boolean(body.parent);
      }
    }
  });
  return self;
}
function DeathExplosion(name, texture, lifetime = 3) {
  const total = 8;
  const particles = [];
  let timer;
  const self = {
    name,
    kill: () => {
      particles.forEach((p) => {
        p.kill();
      });
      particles.length = 0;
      timer = null;
    },
    update: (platforms, hurts) => {
      particles.forEach((p) => {
        p.update(platforms, hurts);
        if (timer && timer.running) {
          p.alpha = mapNumber(timer.dt, 0, lifetime, 1, 0);
        }
      });
    },
    render: (ctx) => {
      particles.forEach((p) => {
        p.render(ctx);
      });
    },
    addTo: (x = 0, y = 0, group, index) => {
      for (let i = 0; i < total; i++) {
        const p = DeathExplosionParticle(texture, x, y);
        p.addTo(group, index);
        particles.push(p);
      }
      timer = WaitTimer(lifetime, self.kill);
    }
  };
  Object.defineProperties(self, {
    active: {
      get: () => {
        return Boolean(particles.length);
      }
    }
  });
  return self;
}

// src/entities/DeathExplosionPool.js
var MAX_PLAYER_DEATH_EXPLOSION = 1;
var MAX_ENEMY_DEATH_EXPLOSION = 5;
function DeathExplosionPool() {
  let uid = 0;
  const explosions = {};
  const updaters = {};
  const self = {
    init: () => {
      addToBasket("player", { max: MAX_PLAYER_DEATH_EXPLOSION, pool: [] });
      addToBasket("enemy", { max: MAX_ENEMY_DEATH_EXPLOSION, pool: [] });
      for (let key in explosions) {
        const bname = (
          /** @type {TDeathExplosionType}*/
          key
        );
        const props = explosions[bname];
        const max = props.max;
        const pool2 = props.pool;
        for (let i = 0; i < max; i++) {
          const newName = `${bname}_${i}`;
          switch (bname) {
            case "player":
              pool2.push(DeathExplosion(newName, PLAYER_BLOOD));
              break;
            case "enemy":
              pool2.push(DeathExplosion(newName, ENEMY_BLOOD));
              break;
          }
        }
      }
    },
    update: (platforms, hurts) => {
      for (let id in updaters) {
        const mc = updaters[id];
        if (mc.active) {
          mc.update(platforms, hurts);
        } else {
          delete updaters[id];
        }
      }
    },
    render: (ctx) => {
      for (let id in updaters) {
        const mc = updaters[id];
        if (mc.active) {
          mc.render(ctx);
        }
      }
    },
    get: (name) => {
      const pool2 = explosions[name].pool;
      let mc;
      for (let i = 0; i < pool2.length; i++) {
        const _mc = pool2[i];
        if (!_mc.active) {
          mc = _mc;
          uid += 1;
          updaters[uid] = mc;
          break;
        }
      }
      return mc;
    },
    detach: () => {
      for (let key in explosions) {
        const bname = (
          /** @type {TDeathExplosionType}*/
          key
        );
        const props = explosions[bname];
        const pool2 = props.pool;
        pool2.forEach((mc) => {
          mc.kill();
        });
      }
    }
  };
  self.init();
  function addToBasket(name, data) {
    explosions[name] = data;
  }
  return self;
}

// media/fruitsAssets.js
var APPLE_IDLE_ITEM = {
  w: 16,
  h: 16,
  frames: "$86A1B1$1A1$13A1B1$12C1D1C2D1C1$10E1F1G1D2E1$10E2F1E3$10C1E4C1$11E2C1E1$70|$70A1B1$1A1$13A1B1$12C1D1C2D1C1$10E1F1G1D2E1$10E2F1E3$10C1E4C1$11E2C1E1$86|$54A1B1$1A1$13A1B1$12C1D1C2D1C1$10E1F1G1D2E1$10E2F1E3$10C1E4C1$11E2C1E1$102|$70A1B1$1A1$13A1B1$12C1D1C2D1C1$10E1F1G1D2E1$10E2F1E3$10C1E4C1$11E2C1E1$86|$102A1B1$1A1$13A1B1$12C1D1C2D1C1$10E1F1G1D2E1$10E2F1E3$10C1E4C1$11E2C1E1$54",
  palette: { "A": "#38b764", "B": "#257179", "C": "#5d275d", "D": "#ef7d57", "E": "#b13e53", "F": "#f4f4f4", "G": "#ffcd75" },
  fps: 8
};
var CORN_IDLE_ITEM = {
  w: 16,
  h: 16,
  frames: "$105A1B1$10C2D1A1B1E1$11D1A1B1E1B1$10D1E1B1E1B1$11C1B1E1C2$11C1D1C1D1C1$11D1C1$1D1$55|$89A1B1$10C2D1A1B1E1$11D1A1B1E1B1$10D1E1B1E1B1$11C1B1E1C2$11C1D1C1D1C1$11D1C1$1D1$71|$73A1B1$10C2D1A1B1E1$11D1A1B1E1B1$10D1E1B1E1B1$11C1B1E1C2$11C1D1C1D1C1$11D1C1$1D1$87|$89A1B1$10C2D1A1B1E1$11D1A1B1E1B1$10D1E1B1E1B1$11C1B1E1C2$11C1D1C1D1C1$11D1C1$1D1$71|$105A1B1$10C2D1A1B1E1$11D1A1B1E1B1$10D1E1B1E1B1$11C1B1E1C2$11C1D1C1D1C1$11D1C1$1D1$55",
  palette: { "A": "#f4f4f4", "B": "#ef7d57", "C": "#38b764", "D": "#257179", "E": "#ffcd75" },
  fps: 8
};

// src/entities/ItemBase.js
function ItemBase(name, texture) {
  const self = {
    name,
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    loop: true,
    points: 1,
    followTarget: { x: 0, y: 0, width: 8, height: 8 },
    // default
    followTargetSpeed: 2,
    addTo: (group, index) => {
      if (index !== void 0) {
        group.addAt(self.body, index);
        group.addAt(self.skin, index);
      } else {
        group.add(self.body);
        group.add(self.skin);
      }
      self.parent = group;
    },
    addBody: () => {
      self.body = Rectangle(0, 0, texture.w, texture.h, "#fff");
      self.body.name = `${name}.body`;
      self.body.visible = false;
    },
    setBody: (width, height, color) => {
      self.body.width = width;
      self.body.height = height;
      self.body.color = color ? color : self.body.color;
    },
    addSkin: () => {
      self.skin = AnimatedSprite(texture, false, self.loop);
      self.skin.name = `${name}.skin`;
      self.skin.onComplete = self.onComplete;
    },
    update: () => {
      self.skin.x = self.body.x - self.body.width / 2;
      self.skin.y = self.body.y - self.body.height / 2;
      self.body.update();
      self.skin.update();
      if (self.gotHit) {
        followConstant(self, self.followTarget, self.followTargetSpeed);
        const hit = overlap(self.body, self.followTarget);
        if (hit) {
          self.kill();
        }
      }
    },
    render: (ctx) => {
    },
    vsPlayer: (player, group) => {
      if (self.gotHit) {
        return;
      }
      const r1 = self.body;
      const r2 = player.body;
      const hit = overlap(r1, r2);
      if (hit) {
        self.gotHit = true;
        self.onHit();
        player.syncPowers();
        Sound.play("fxPick");
      }
    },
    onHit: () => {
      self.stop(0);
    },
    kill: () => {
      self.skin.stop();
      self.body.detach();
      self.skin.detach();
      self.parent = null;
      self.reserved = false;
      self.gotHit = false;
    },
    play: () => {
      self.skin.visible = true;
      self.skin.start();
    },
    stop: (frameIndex) => {
      self.skin.stop(frameIndex);
    }
  };
  Object.defineProperties(self, {
    x: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.x = value;
      },
      get: () => {
        return self.body.x;
      }
    },
    y: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.y = value;
      },
      get: () => {
        return self.body.y;
      }
    },
    width: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.width = value;
      },
      get: () => {
        return self.body.width;
      }
    },
    height: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.height = value;
      },
      get: () => {
        return self.body.height;
      }
    },
    scaleX: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.scaleX = value;
      },
      get: () => {
        return self.body.scaleX;
      }
    },
    active: {
      get: () => {
        return Boolean(self.body.parent && self.skin.parent);
      }
    }
  });
  return self;
}

// src/entities/AppleItem.js
function AppleItem(name, texture) {
  const self = ItemBase(name, texture);
  const _onHit = self.onHit;
  self.followTarget = { x: 0, y: 0, width: 4, height: 4 };
  self.addBody();
  self.addSkin();
  self.onHit = () => {
    store.fireBall.total += self.points;
    store.setPlayerPower("fireball", store.fireBall.total);
    _onHit();
  };
  return self;
}

// src/entities/CornItem.js
function CornItem(name, texture) {
  const self = ItemBase(name, texture);
  const _onHit = self.onHit;
  self.followTarget = { x: 32, y: 0, width: 4, height: 4 };
  self.addBody();
  self.addSkin();
  self.onHit = () => {
    store.laserBeam.total += self.points;
    store.setPlayerPower("laserBeam", store.laserBeam.total);
    _onHit();
  };
  return self;
}

// src/entities/ItemsPool.js
var MAX_ITEM_APPLE = 1;
var MAX_ITEM_CORN = 1;
function ItemsPool() {
  let uid = 0;
  const items = {};
  const updaters = {};
  const self = {
    init: () => {
      addToBasket("apple", { max: MAX_ITEM_APPLE, pool: [] });
      addToBasket("corn", { max: MAX_ITEM_CORN, pool: [] });
      for (let key in items) {
        const bname = (
          /** @type {TItemType}*/
          key
        );
        const props = items[bname];
        const max = props.max;
        const pool2 = props.pool;
        for (let i = 0; i < max; i++) {
          const newName = `${bname}_${i}`;
          switch (bname) {
            case "apple":
              pool2.push(AppleItem(newName, APPLE_IDLE_ITEM));
              break;
            case "corn":
              pool2.push(CornItem(newName, CORN_IDLE_ITEM));
              break;
          }
        }
      }
    },
    update: (group, player) => {
      for (let id in updaters) {
        const mc = updaters[id];
        if (mc.active) {
          mc.update();
          mc.vsPlayer(player, group);
        } else {
          delete updaters[id];
        }
      }
    },
    render: (ctx) => {
      for (let id in updaters) {
        const mc = updaters[id];
        if (mc.active) {
          mc.render(ctx);
        }
      }
    },
    get: (name) => {
      const pool2 = items[name].pool;
      let mc;
      for (let i = 0; i < pool2.length; i++) {
        const _mc = pool2[i];
        if (!_mc.active && !_mc.reserved) {
          mc = _mc;
          uid += 1;
          updaters[uid] = mc;
          mc.reserved = true;
          break;
        }
      }
      return mc;
    },
    detach: () => {
      for (let key in items) {
        const bname = (
          /** @type {TItemType}*/
          key
        );
        const props = items[bname];
        const pool2 = props.pool;
        pool2.forEach((mc) => {
          mc.kill();
        });
      }
      clearUpdaters();
    }
  };
  self.init();
  function clearUpdaters() {
    for (let id in updaters) {
      delete updaters[id];
    }
  }
  function addToBasket(name, data) {
    items[name] = data;
  }
  return self;
}

// media/powerAssets.js
var POWER_FIREBALL = {
  w: 8,
  h: 8,
  frames: "$19A2$5A1B1C1A1$4A1B2A1$5A2$19|$19A2$5A1D2A1$4A1D2A1$5A2$19|$19D2$5D1A2D1$4D1A2D1$5D2$19",
  palette: { "A": "#b13e53", "B": "#5d275d", "C": "#ffcd75", "D": "#ef7d57" },
  fps: 12
};
var POWER_LASER_BEAM = {
  w: 96,
  h: 8,
  frames: "$97A3B2$90A5B91A197B91$1A3B2$186|$97A3C2$90A5C91A197C91$1A3C2$186|$193D96A95D1A95$1D95$192|$193E96F95E1F95$1E95$192|$289D96A95$1D95$192|$289C95$1C95$288|$289C2$1C2$1C2$1C4$2C3$1C1$1C2$1C7$2C1$1C1$1C4$1C4$3C1$1C2$1C2$1C4$2C3$1C1$1C2$1C7$2C1$1C1$1C4$1C4$385|$289C2$14C1$1C2$1C7$2C1$1C1$1C2$24C3$12C1$2C1$1C1$1C4$393",
  palette: { "A": "#f4f4f4", "B": "#73eff7", "C": "#b13e53", "D": "#3b5dc9", "E": "#ef7d57", "F": "#ffcd75" },
  fps: 10
};

// src/entities/PowerBase.js
function PowerBase(name, texture) {
  const self = {
    name,
    flipH: 1,
    speedX: 1,
    x: 0,
    y: 0,
    vx: 0,
    width: 0,
    height: 0,
    scaleX: 1,
    loop: true,
    addTo: (group, index) => {
      if (index !== void 0) {
        group.addAt(self.body, index);
        group.addAt(self.skin, index);
      } else {
        group.add(self.body);
        group.add(self.skin);
      }
      self.parent = group;
    },
    addBody: () => {
      self.body = Rectangle(0, 0, texture.w, texture.h);
      self.body.name = `${name}.body`;
      self.body.visible = false;
    },
    addSkin: () => {
      self.skin = AnimatedSprite(texture, false, self.loop);
      self.skin.name = `${name}.skin`;
      self.skin.onComplete = self.onComplete;
    },
    update: () => {
      self.skin.x = self.body.x;
      self.skin.y = self.body.y;
      self.body.update();
      self.skin.update();
    },
    render: (ctx) => {
    },
    kill: () => {
      self.skin.stop();
      self.skin.detach();
      self.body.detach();
      self.parent = null;
      self.reserved = false;
    },
    play: () => {
      self.skin.visible = true;
      self.skin.start();
    },
    stop: () => {
      self.skin.stop();
    },
    vsPlatforms: (colliders, group) => {
      if (!self.allowHit) {
        return;
      }
      for (let i = 0; i < colliders.length; i++) {
        if (!self.active) {
          break;
        }
        const platform = colliders[i];
        const r1 = self.body;
        const r2 = platform;
        const hit = overlap(r1, r2);
        if (hit) {
          self.onHitPlatform(platform);
          self.kill();
        }
      }
    },
    vsEnemies: (enemies, group) => {
      for (let i = 0; i < enemies.length; i++) {
        const enemy = enemies[i];
        if (!self.active) {
          break;
        }
        const r1 = self.body;
        const r2 = enemy.body;
        const hit = overlap(r1, r2);
        if (hit && enemy.active) {
          enemy.receiveDamage(1, self);
          self.onHitEnemy(enemy);
        }
      }
    },
    onHitPlatform: (platform) => {
    },
    onHitEnemy: (enemy) => {
    }
  };
  Object.defineProperties(self, {
    x: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.x = value;
      },
      get: () => {
        return self.body.x;
      }
    },
    y: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.y = value;
      },
      get: () => {
        return self.body.y;
      }
    },
    width: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.width = value;
      },
      get: () => {
        return self.body.width;
      }
    },
    height: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.height = value;
      },
      get: () => {
        return self.body.height;
      }
    },
    scaleX: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.scaleX = value;
      },
      get: () => {
        return self.body.scaleX;
      }
    },
    active: {
      get: () => {
        return Boolean(self.body.parent && self.skin.parent);
      }
    }
  });
  return self;
}

// src/entities/PowerFireBall.js
function PowerFireBall(name, texture) {
  const o = PowerBase(name, texture);
  const _update = o.update;
  const self = Object.assign(
    o,
    /** @type {TPowerBase}*/
    {
      update: () => {
        if (!self.active) {
          return;
        }
        _update();
        self.vx = self.flipH * self.speedX;
        self.x += self.vx;
      },
      onHitPlatform: (platform) => {
        const mc = root.sfxPool.get("fireballImpact");
        if (!mc) {
          return;
        }
        mc.x = self.flipH === -1 ? self.x + self.width : self.x;
        mc.y = self.y;
        mc.scaleX = self.flipH;
        mc.start();
        self.parent.add(mc);
      },
      onHitEnemy: (enemy) => {
        self.kill();
      }
    }
  );
  self.allowHit = true;
  self.addBody();
  self.addSkin();
  return self;
}

// src/entities/PowerLaserBeam.js
function PowerLaserBeam(name, texture) {
  const o = PowerBase(name, texture);
  const _update = o.update;
  const self = Object.assign(
    o,
    /** @type {TPowerBase}*/
    {
      update: () => {
        if (!self.active) {
          return;
        }
        _update();
        self.skin.scaleX = self.body.scaleX;
        if (self.body.scaleX < 0) {
          self.skin.x = self.x + self.skin.width;
        } else {
          self.skin.x = self.x;
        }
      },
      onComplete: (name2) => {
        self.kill();
      }
    }
  );
  self.loop = false;
  self.addBody();
  self.addSkin();
  return self;
}

// src/entities/PowerPool.js
var MAX_POWER_LASER_BEAM = 1;
var MAX_POWER_FIRE_BALL = 1;
function PowerPool() {
  let uid = 0;
  const powers = {};
  const updaters = {};
  const self = {
    init: () => {
      addToBasket("fireball", { max: MAX_POWER_FIRE_BALL, pool: [] });
      addToBasket("laserBeam", { max: MAX_POWER_LASER_BEAM, pool: [] });
      for (let key in powers) {
        const bname = (
          /** @type {TPowerType}*/
          key
        );
        const props = powers[bname];
        const max = props.max;
        const pool2 = props.pool;
        for (let i = 0; i < max; i++) {
          const newName = `${bname}_${i}`;
          switch (bname) {
            case "fireball":
              pool2.push(PowerFireBall(newName, POWER_FIREBALL));
              break;
            case "laserBeam":
              pool2.push(PowerLaserBeam(newName, POWER_LASER_BEAM));
              break;
          }
        }
      }
    },
    update: (group, platforms, enemies) => {
      for (let id in updaters) {
        const mc = updaters[id];
        if (mc.active) {
          mc.update();
          mc.vsPlatforms(platforms, group);
          mc.vsEnemies(enemies, group);
        } else {
          delete updaters[id];
        }
      }
    },
    render: (ctx) => {
      for (let id in updaters) {
        const mc = updaters[id];
        if (mc.active) {
          mc.render(ctx);
        }
      }
    },
    get: (name) => {
      const pool2 = powers[name].pool;
      let mc;
      for (let i = 0; i < pool2.length; i++) {
        const _mc = pool2[i];
        if (!_mc.active && !_mc.reserved) {
          mc = _mc;
          uid += 1;
          updaters[uid] = mc;
          mc.reserved = true;
          break;
        }
      }
      return mc;
    },
    detach: () => {
      for (let key in powers) {
        const bname = (
          /** @type {TPowerType}*/
          key
        );
        const props = powers[bname];
        const pool2 = props.pool;
        pool2.forEach((mc) => {
          mc.kill();
        });
      }
      clearUpdaters();
    }
  };
  self.init();
  function clearUpdaters() {
    for (let id in updaters) {
      delete updaters[id];
    }
  }
  function addToBasket(name, data) {
    powers[name] = data;
  }
  return self;
}

// media/sfxAssets.js
var BLAST_SFX = {
  w: 16,
  h: 16,
  frames: "$70A4$11A6$9A8$8A8$8A8$8A8$9A6$11A4$70|$70B4$11B6$9B3C1B4$8B2C1B3C1B1$8B5C1B2$8B3C1B4$9B6$11B4$70|$18D1$8D1$7D2$5D1$9D2$3D2$9D3$1D2$3D3$5D10$6D4B2D3$4D4B2D1B1D3$7D3B4D2$8D3B3D2$9D2B1D4$9D6$9D7$8D5$11D2$13D1$12|$3D2$6D1$7D1$20A2$11D2A4$7D1$1E1D2E1A3D2$3D2$2D1E3A2D2E2D5$2E1D2E2D1E3A1D1$1D2$1A2D5E2A2$4A4E1D2E1A2$6A4E1D2A4$6A2E1D1E2D1A2$8A1D3E1D1A1$10A1E3$12A3$11D1$15D2$10|$8A1$4D2$7A3$5D1$5D2E1A1$2E1D2$6E1D1A3$1E1D3E2$4E2A3$1A2E4$3A1E2D1A1$2A2$2E2A1$3A1D2$2A2$4A2D2$6A1D3$4D1$2A1$3A3D2E1$5A3$2A4E2A1$5A1$4A1D2E1A3$10A1E2$1A1$6E2A1$13A1D2E2$12A1D2$24|$8A2$8E1D1$4A2$1E3$3E1D1$2A1$7E2$3D1$1A3$7E1$6A1$13A1$5E2$7A3$5D2$2A2$3A1$4A2E1D1$2A2$1A2$5A2E2$5A2$6E2$17A1$6E1$2A2$3A3$5E1D1$1A2$4A1$7E1D1E1$14E3$24|$6A3$9E1$4A1$5E2$3E2$10E2$1E1$3A1$14A2$19E1$16E1$20A1$2A2$4A2$4A2$2A2$4A1$19E2$2A1$6A1$4E1$4A1$6A1$2E1$7E1$16E2$16E1$9",
  palette: { "A": "#333c57", "B": "#f4f4f4", "C": "#566c86", "D": "#ffcd75", "E": "#ef7d57" },
  fps: 9
};
var BODY_EXPLODE_SFX = {
  w: 16,
  h: 16,
  frames: "$19A1$4A1$11A1$3A2$10A6$2A2$3A2$1A2B4A4$3A4B6A2$5A2B3C2B3A1$6A1B2C4B2A1$6A1B2C4B2A2$4A2B3C2B3A3$2A4B6A2$6A3B4A2$9A8$9A2$3A2$9A1$25|$8A1$10A1$4A2$9A2$4A1$3A2$13A2$2A2$5C4$1A1$4A2$1C8$9C6$10C2$1C2$2A2$6C3$1C1$4A2$5C3$2C2$1A4$2A2$1C3$1C3$5A2$3C2$2C1$17A1$8A1$5A3$7A1$6A2$6A1$11|$3A1$4A1$10A2$4A1$10A1$9A4$5C3$7A1$4C2$2C1$11C3$14C3$14C1$21A2$4C1$8A3$1A1$2C2$5C2$3A2$3C3$3C1$10C2$22A1$5A1$8A2$4A1$12|$3A1$27A1$7C2$5A1$7C2$33C2$15C2$34A2$16A2$18C2$7C1$7C2$5C2$32A1$17|$38C1$14C1$36C2$15C1$87C2$8C1$6C2$6C1$35|$20C2$14C1$54C1$16C1$85C1$16C1$9C1$34",
  palette: { "A": "#94b0c2", "B": "#f4f4f4", "C": "#b13e53" },
  fps: 10
};
var EMERGE_DUSTS_SFX = {
  w: 16,
  h: 16,
  frames: "$177A1$11A2$3A2$6A1$2A2$2A4$4A3$6A2$2A2$1A3$10A2$2A1$2A1$2|$161A1$12A2$14A2$16A2$2A2$6A2$2A2$2A2$6A2$18|$146A1$24A2$2A3$9A2$1A4$1A2$14A1$9A1$34|$145A1$24A2$3A1$3A2$5A2$4A2$14A1$11A2$34|$177A1$1A1$6A2$2A2$3A1$12A2$10A2$34|$190A1$1A1$2A1$12A1$11A1$35|$206A1$1A1$47",
  palette: { "A": "#f4f4f4" },
  fps: 10
};
var IMPACT_DUSTS_SFX = {
  w: 16,
  h: 16,
  frames: "$195A2$13A3$7A2$4A2$7A3$5A3$4A3$3|$194A3$6A2$5A3$6A2$6A2$7A2$4A2$8A2$2|$178A2$8A2$3A3$8A3$2A2$10A2$33|$177A2$11A5$11A4$46|$174A4$13A3$62|$174A1$2A1$15A1$62",
  palette: { "A": "#f4f4f4" },
  fps: 10
};
var FIRE_BALL_IMPACT_SFX = {
  w: 8,
  h: 8,
  frames: "$13A2$5A3B1$1A2$1A2B2$1A2$3C2$4A2C2$4A3B1$5A2$1|$12A2$3A2$1A2B2$1A2$3B2$10A2$3B1$2A2$2B2$8|$10A1$3B1$6B2$1A1$3B2$15B1$3A1$3B1$10|$13B2$5B2$42|$12B1$51",
  palette: { "A": "#b13e53", "B": "#5d275d", "C": "#ef7d57" },
  fps: 12
};

// src/entities/SfxBase.js
function SfxBase(name, texture) {
  const o = AnimatedSprite(texture, false, false);
  const self = Object.assign(
    o,
    /** @type {TSfxBase}*/
    {
      name,
      onComplete: (name2) => {
        self.kill();
      },
      kill: () => {
        self.stop();
        self.detach();
        self.reserved = false;
      }
    }
  );
  self.visible = true;
  Object.defineProperties(self, {
    active: {
      get: () => {
        return self.parent;
      }
    }
  });
  return self;
}

// src/entities/SfxPool.js
var MAX_SFX_FLOOR_IMPACT_DUSTS = 3;
var MAX_SFX_BLAST = 1;
var MAX_SFX_EMERGE_DUSTS = 5;
var MAX_SFX_BODY_EXPLODE = 5;
function SfxPool() {
  let uid = 0;
  const basket = {};
  const updaters = {};
  const self = {
    init: () => {
      addToBasket("impactDusts", { max: MAX_SFX_FLOOR_IMPACT_DUSTS, pool: [] });
      addToBasket("blast", { max: MAX_SFX_BLAST, pool: [] });
      addToBasket("emergeDusts", { max: MAX_SFX_EMERGE_DUSTS, pool: [] });
      addToBasket("bodyExplode", { max: MAX_SFX_BODY_EXPLODE, pool: [] });
      addToBasket("fireballImpact", { max: MAX_POWER_FIRE_BALL, pool: [] });
      for (let key in basket) {
        const bname = (
          /** @type {TSfxType}*/
          key
        );
        const props = basket[bname];
        const max = props.max;
        const pool2 = props.pool;
        for (let i = 0; i < max; i++) {
          const newName = `${bname}_${i}`;
          switch (bname) {
            case "impactDusts":
              pool2.push(SfxBase(newName, IMPACT_DUSTS_SFX));
              break;
            case "emergeDusts":
              pool2.push(SfxBase(newName, EMERGE_DUSTS_SFX));
              break;
            case "fireballImpact":
              pool2.push(SfxBase(newName, FIRE_BALL_IMPACT_SFX));
              break;
            case "blast":
              pool2.push(SfxBase(newName, BLAST_SFX));
              break;
            case "bodyExplode":
              pool2.push(SfxBase(newName, BODY_EXPLODE_SFX));
              break;
          }
        }
      }
    },
    update: () => {
      for (let id in updaters) {
        const mc = updaters[id];
        if (mc.active) {
          mc.update();
        } else {
          delete updaters[id];
        }
      }
    },
    get: (name) => {
      const pool2 = basket[name].pool;
      let mc;
      for (let i = 0; i < pool2.length; i++) {
        const _mc = pool2[i];
        if (!_mc.active && !_mc.reserved) {
          mc = _mc;
          uid += 1;
          updaters[uid] = mc;
          mc.reserved = true;
          break;
        }
      }
      return mc;
    },
    detach: () => {
      for (let key in basket) {
        const bname = (
          /** @type {TSfxType}*/
          key
        );
        const props = basket[bname];
        const pool2 = props.pool;
        pool2.forEach((mc) => {
          mc.kill();
        });
      }
      clearUpdaters();
    }
  };
  self.init();
  function clearUpdaters() {
    for (let id in updaters) {
      delete updaters[id];
    }
  }
  function addToBasket(name, data) {
    basket[name] = data;
  }
  return self;
}

// src/Resizer.js
function Resizer(layers, dimension) {
  let defaultSize = 512;
  let fullScreen = true;
  const resize = () => {
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    const availableRatio = windowWidth / windowHeight;
    const canvasRatio = dimension.width / dimension.height;
    let appliedWidth = 0;
    let appliedHeight = 0;
    if (availableRatio <= canvasRatio) {
      appliedWidth = windowWidth;
      appliedHeight = appliedWidth / canvasRatio;
    } else {
      appliedHeight = windowHeight;
      appliedWidth = appliedHeight * canvasRatio;
    }
    layers.forEach((canvas) => {
      if (fullScreen) {
        canvas.style.width = toPx(appliedWidth);
        canvas.style.height = toPx(appliedHeight);
      } else {
        canvas.style.width = toPx(defaultSize);
        canvas.style.height = toPx(defaultSize);
      }
    });
  };
  window.onresize = resize;
  resize();
}

// media/level1Data.js
var LEVEL1DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      36,
      -1,
      -1,
      -1,
      36,
      -1,
      -1,
      -1,
      32,
      50,
      51,
      41,
      -1,
      -1,
      -1,
      54,
      -1,
      -1,
      -1,
      30,
      41,
      56,
      57,
      47,
      36,
      31,
      55,
      60,
      61,
      38,
      39,
      40,
      47,
      41,
      -1,
      -1,
      42,
      60,
      61,
      -1,
      -1,
      54,
      55,
      46,
      -1,
      47,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      60,
      61,
      -1,
      10,
      10,
      10,
      -1,
      -1,
      -1,
      -1,
      -1,
      9,
      -1,
      -1,
      -1,
      16,
      16,
      16,
      11,
      0,
      15,
      1,
      4,
      15,
      15,
      5,
      3,
      1,
      1,
      1,
      5,
      6,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      8,
      12,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      14,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 96,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 96,
        "y": 0,
        "width": 8,
        "height": 72
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "player",
        "id": 1,
        "x": 8,
        "y": 48
      },
      {
        "name": "door",
        "id": 5,
        "x": 88,
        "y": 24,
        "width": 8,
        "height": 32
      },
      {
        "name": "apple_item",
        "id": 9,
        "x": 48,
        "y": 48,
        "width": 8,
        "height": 8
      }
    ]
  },
  {
    "name": "texts",
    "entities": [
      {
        "name": "text",
        "id": 0,
        "x": 0,
        "y": 80,
        "width": 8,
        "height": 8,
        "values": {
          "text": "Arrow Keys to Move",
          "name": "move"
        }
      }
    ]
  }
];

// src/entities/TriggerEnemy.js
function TriggerEnemy(nodeList, width, height, color) {
  let nodes = nodeList;
  let enemiesTriggered = nodes.map(() => false);
  const o = Rectangle(0, 0, width, height, color);
  const self = Object.assign(
    o,
    /** @type {TTriggerEnemy}*/
    {
      nodes,
      width,
      height,
      register: (index) => {
        enemiesTriggered[index] = true;
      },
      isJobDone: () => {
        return !enemiesTriggered.includes(false);
      },
      kill: () => {
        self.detach();
      }
    }
  );
  return self;
}

// packages/display/Tilemap.js
function Tilemap(tilesTexture, tilesData, gridCellsX) {
  const o = DisplayObject();
  const buffer = toCanvasPool(String(o.uid));
  const bcanvas = buffer.canvas;
  const bctx = buffer.ctx;
  const self = Object.assign(
    o,
    /** @type {TTilemap}*/
    {
      texture: tilesTexture,
      render: (ctx) => {
        if (!self.visible || !self.texture) {
          return;
        }
        if (buffer.cached) {
          ctx.drawImage(bcanvas, 0, 0);
          return;
        }
        buffer.cached = true;
        bcanvas.width = ctx.canvas.width;
        bcanvas.height = ctx.canvas.height;
        const w = tilesTexture.w;
        tilesData.forEach((id, i) => {
          if (id > -1) {
            const tx = i % gridCellsX * w;
            const ty = Math.floor(i / gridCellsX) * w;
            renderTexture(bctx, self.texture, id, tx, ty);
          }
        });
      },
      destroy: () => {
        dropCanvasPool(String(o.uid));
      }
    }
  );
  if (tilesTexture) {
    self.width = tilesTexture.w;
    self.height = tilesTexture.h;
  }
  return self;
}

// packages/fonts/BitmapFont.js
function BitmapFont(fontTexture, fontFrames, fontTilesetColumns, text, gap = 1) {
  const o = DisplayObject();
  const _render = o.render;
  let _text = text;
  let _gap = gap;
  let buffer = toCanvasPool(String(o.uid));
  let bcanvas = buffer.canvas;
  let bctx = buffer.ctx;
  const self = Object.assign(
    o,
    /** @type {TBitmapFont}*/
    {
      text: _text,
      texture: fontTexture,
      render: (ctx) => {
        if (!self.visible || !self.texture) {
          return;
        }
        if (buffer.cached) {
          renderProps(self, ctx);
          ctx.drawImage(bcanvas, 0, 0);
          return;
        }
        buffer.cached = true;
        const frames = getTextFrames();
        const w = fontTexture.w;
        const col = fontTilesetColumns;
        bcanvas.width = ctx.canvas.width;
        bcanvas.height = ctx.canvas.height;
        frames.forEach((frame, i) => {
          const id = frame.id;
          let tx = i % col * w;
          if (i) {
            const prevFramesWidth = frames.map((val) => val.w).filter((_, j) => j < i);
            const totalPrevFramesWidth = prevFramesWidth.reduce((a, b) => a + b, 0);
            tx = totalPrevFramesWidth + self.gap * i;
          }
          const ty = 0;
          renderTexture(bctx, self.texture, id, tx, ty);
        });
        renderProps(self, bctx);
      },
      destroy: () => {
        dropCanvasPool(String(o.uid));
      }
    }
  );
  function getTextFrames() {
    const texts = _text.split("");
    const letters = fontFrames.map((val) => val[0]);
    const letterWidths = fontFrames.map((val) => val[1]);
    const frames = texts.map((letter) => {
      const letterIndex = letters.indexOf(letter);
      const letterWidth = letterWidths[letterIndex];
      return { id: letterIndex, w: letterWidth, l: letter };
    });
    return frames;
  }
  if (fontTexture) {
    self.width = fontTexture.w;
    self.height = fontTexture.h;
  }
  function recreateBuffer() {
    buffer = toCanvasPool(String(o.uid));
    bcanvas = buffer.canvas;
    bctx = buffer.ctx;
  }
  Object.defineProperties(self, {
    text: {
      /**
       * @param {string} value
       */
      set: (value) => {
        if (_text === value) {
          return;
        }
        _text = value;
        self.destroy();
        recreateBuffer();
      },
      get: () => {
        return _text;
      }
    },
    gap: {
      /**
       * @param {number} value
       */
      set: (value) => {
        _gap = value;
        self.destroy();
        recreateBuffer();
      },
      get: () => {
        return _gap;
      }
    }
  });
  return self;
}

// media/tiles.js
var GridCellsX = 12;
var TILES = {
  w: 8,
  h: 8,
  frames: "$4A1$1A1$4A1$1A1$1A1$1A1$1A1$1A3$1A1B1$1B1A1B1$2A2B2A1B1A1$1A1B2A1B1A1B1A1B1A1B3A1B1A1B1A1B1A1B2A1|$4A1$4A1$2A1$1A1$2A1$1A1$1A2$1A1$1B1A1$1A1$2A1B1A1B1$1B1$1B1A1B2A1B1A1B1A1B1A1B1A1B1A1B4A1B1A1B1A1B1|$1A1$1A1$4A1$1A1$1A1$3A3$1A1$1A1$2B1A1B1$1B1A1$1A1B1A1B2A2$1B1A1B1A1B2A1$1B1A1B3A1B1A2B2A1B1A1B1A1|$20A1$1A1$6A2$5A1$1A2$4A1$1A2$5A1$1B1$4A1B1A1B1|$17A1$1A1$2A1$1A1$1A1$1A1$1A1$1A1$1A2$1A1$1A3$1A1$1A3$1A2B1A2$1B1A1B2A2B2A1|$17A1$1A1$4A1$1A1$6A1$1A1$5A1$1A1$4A1$1A1B1$4B1A1B1A1$4|$1C8B10C2B2C18D2C2D2C1D4C1D11|C8B8C1B2C2B1C16D1C3D2C2D1C2D15|C7$1B7C3B2C2B2C9D2C2D1C2D3C2D2C1D16|$27E1F1$6E1F1$4E5F1$4E1F1$6E1F1$3|$2F1A1$2F1$3E1$3E1$1A1E2A1F1E1A1F1$1A1F1$2A1E1$1A1$1F1A2$1F1A1$2E1$3E1$1F1E1A1F1A2E1F1$1A1F1$1A1$1F1$1|$64|D1G1D3G2D1G3D2G2D11G2D1G2D3G2D1G2D3G2D6G1D3G1D1$2D3$3|D1G1D3G2D1G3D2G3D1G2D10G1D3G2D1G3D1G3D2G1D3G1D5$3D4$2|D6G1D2G3D1G3D1G4D1G1D1G4D5G3D16$1D3$2D2$2D1$1|$3F2$5F1E3$3F1E1F4$1F1E1F1H4F2E1F1H1F2H1F2A1F2H3I1A3H1A2I2B1A1F1B1A1B2A1|$1A2$3F1$3E1A2$1A1$1F1A2E1A1F1A1F1$1A1F1A1$2E1A1$2F1$1A1$1A1$2A1E1$1A1$1F1$1A1$1E1A2$1E1A1$1A2$1A4|$64|$36G1$7G1$7G1$6G2$3|$45G1$7G1$3G1$3G1$1G1|D1G1D3G2D1G3D2G2D11G2D1G2D3G2D1G2D3G2D6G1D3G1D9|D1G1D3G2D1G3D2G3D1G2D10G1D3G2D1G3D1G3D2G1D3G1D14|D6G1D2G3D1G3D1G4D1G1D1G4D5G3D28|$64|$6F1$4F1$2F1$4F1$2F1$1F1$2F1$2F1$1F1$2F1$2F1$1F1$2F1$2F1$1F1$1F1$4F2$1F1$4F1|F1$3F1$2F2$3F1$2F2$3F1$1F3$2F1$2F2$1F1$1F1$2F2$1F1$1F1$1F3$1F1$1F1$1F3$1F1$1F1$1F3|F1$1F1$1F1$1F1$1F1$1F1$1F1$1F1$1F1$1F1$1F1$1F1$1F1$1F1$4F2$2F1$3F2$2F1$3F2$2F1$12|$64|$64|$64|$11F1$13F1$1E1$1F1$13F1$20|$12F1$7F1$5F2E1F2$5F1$7F1$19|$19F1$6F1E1F1$6F1$28|$10F1$1F1$4F1$3F1$5E1$5F1$3F1$4F1$1F1$19|$64|$64|$4F1$37F1$21|$11F1$13F1$13F1$21F1$2|$3F1$34F1$25|$25F1$21F1$16|$21F1$42|$37F1$26|$14F1$20F1$11F1$16|$52F1$11|$1F1$19F1$18F1$1F1$21|$44F1$19|$64|$23F2$39|$64|$38F1$2F1$22|$22F1E1$5E3$4E2F1E1$4E4$3F1E4$3E2F1E2|$8E3F1$4E5$3E2F2$4E1F2$5E2F1$5E2$6E2$6|$64|$64|$60F1$3|$29F1$34|$3E1F3E1$3E2F1E2$4E4$4E4$5E3$6F1E1$16|E2$6F1E1$6E3$5E2F1$5E1F3$4E2F1E2$3E4$12|$64|$64|$64|$64|$64|$64|$64|$64|$64|$64|$64|$64|$64|$64",
  palette: { "A": "#29366f", "B": "#38b764", "C": "#257179", "D": "#5d275d", "E": "#f4f4f4", "F": "#94b0c2", "G": "#b13e53", "H": "#566c86", "I": "#333c57" },
  fps: 1
};

// media/tinyFont.js
var TINY_FONT_TILESET_COLUMNS = 14;
var TINY_FONT_FRAMES = [
  // [letter, letter.width]
  [" ", 4],
  ["!", 1],
  ['"', 3],
  ["#", 5],
  ["$", 4],
  ["%", 5],
  ["&", 5],
  ["'", 1],
  ["(", 2],
  [")", 2],
  ["*", 3],
  ["+", 3],
  [",", 2],
  ["-", 3],
  [".", 1],
  ["/", 5],
  ["0", 4],
  ["1", 2],
  ["2", 4],
  ["3", 4],
  ["4", 4],
  ["5", 4],
  ["6", 4],
  ["7", 4],
  ["8", 4],
  ["9", 4],
  [":", 1],
  [";", 1],
  ["<", 3],
  ["=", 3],
  [">", 3],
  ["?", 4],
  ["@", 5],
  ["A", 4],
  ["B", 4],
  ["C", 3],
  ["D", 4],
  ["E", 3],
  ["F", 3],
  ["G", 4],
  ["H", 4],
  ["I", 3],
  ["J", 4],
  ["K", 4],
  ["L", 3],
  ["M", 5],
  ["N", 4],
  ["O", 4],
  ["P", 4],
  ["Q", 4],
  ["R", 4],
  ["S", 4],
  ["T", 3],
  ["U", 4],
  ["V", 4],
  ["W", 5],
  ["X", 4],
  ["Y", 4],
  ["Z", 3],
  ["[", 2],
  ["\\", 5],
  ["]", 2],
  ["^", 3],
  ["_", 4],
  ["`", 2],
  ["a", 4],
  ["b", 4],
  ["c", 3],
  ["d", 4],
  ["e", 4],
  ["f", 3],
  ["g", 4],
  ["h", 4],
  ["i", 1],
  ["j", 2],
  ["k", 4],
  ["l", 1],
  ["m", 5],
  ["n", 4],
  ["o", 4],
  ["p", 4],
  ["q", 4],
  ["r", 3],
  ["s", 4],
  ["t", 3],
  ["u", 4],
  ["v", 4],
  ["w", 5],
  ["x", 3],
  ["y", 4],
  ["z", 4],
  ["{", 3],
  ["|", 1],
  ["}", 3],
  ["~", 4]
];
var TINY_FONT = {
  w: 8,
  h: 8,
  frames: "$64|A1$7A1$7A1$15A1$31|A1$1A1$5A1$1A1$53|$1A1$1A1$4A5$4A1$1A1$4A5$4A1$1A1$28|$2A1$6A3$4A2$8A2$4A3$7A1$21|A1$2A1$7A1$6A1$6A1$7A1$2A1$27|$1A2$5A1$8A2$1A1$3A1$2A1$5A2$1A1$27|A1$7A1$55|$1A1$6A1$7A1$7A1$8A1$30|A1$8A1$7A1$7A1$6A1$31|A1$1A1$6A1$6A1$1A1$45|$9A1$6A3$6A1$38|$33A1$6A1$23|$16A3$45|$32A1$31|$4A1$6A1$6A1$6A1$6A1$31|$1A2$5A1$2A1$4A1$2A1$4A1$2A1$5A2$29|A2$7A1$7A1$7A1$7A1$30|A3$8A1$5A2$5A1$7A4$28|A3$8A1$5A2$8A1$4A3$29|$2A1$6A2$5A1$1A1$5A4$6A1$29|A4$4A1$7A3$8A1$4A3$29|$1A2$5A1$7A3$5A1$2A1$5A2$29|A4$7A1$6A1$6A1$7A1$30|$1A2$5A1$2A1$5A2$5A1$2A1$5A2$29|$1A2$5A1$2A1$5A3$7A1$5A2$29|$8A1$15A1$39|$8A1$15A1$7A1$31|$2A1$6A1$6A1$8A1$8A1$29|$8A3$13A3$37|A1$8A1$8A1$6A1$6A1$31|A3$8A1$5A2$14A1$30|$1A3$4A1$3A1$3A1$1A3$3A1$1A1$1A1$4A3$28|$1A2$5A1$2A1$4A1$2A1$4A4$4A1$2A1$28|A3$5A1$2A1$4A3$5A1$2A1$4A3$29|$1A2$5A1$7A1$7A1$8A2$29|A3$5A1$2A1$4A1$2A1$4A1$2A1$4A3$29|A3$5A1$7A3$5A1$7A3$29|A3$5A1$7A3$5A1$7A1$31|$1A3$4A1$7A1$1A2$4A1$2A1$5A3$28|A1$2A1$4A1$2A1$4A4$4A1$2A1$4A1$2A1$28|A3$6A1$7A1$7A1$6A3$29|$2A2$7A1$7A1$4A1$2A1$5A2$29|A1$2A1$4A1$1A1$5A2$6A1$1A1$5A1$2A1$28|A1$7A1$7A1$7A1$7A3$29|A1$3A1$3A2$1A2$3A1$1A1$1A1$3A1$3A1$3A1$3A1$27|A1$2A1$4A2$1A1$4A1$1A2$4A1$2A1$4A1$2A1$28|$1A2$5A1$2A1$4A1$2A1$4A1$2A1$5A2$29|A3$5A1$2A1$4A1$2A1$4A3$5A1$31|$1A2$5A1$2A1$4A1$2A1$4A1$2A1$5A2$8A1$20|A3$5A1$2A1$4A1$2A1$4A3$5A1$2A1$28|$1A3$4A1$8A2$8A1$4A3$29|A3$6A1$7A1$7A1$7A1$30|A1$2A1$4A1$2A1$4A1$2A1$4A1$2A1$5A2$29|A1$2A1$4A1$2A1$4A1$1A1$5A1$1A1$6A1$30|A1$3A1$3A1$1A1$1A1$3A1$1A1$1A1$3A1$1A1$1A1$4A1$1A1$28|A1$2A1$4A1$2A1$5A2$5A1$2A1$4A1$2A1$28|A1$2A1$4A1$2A1$5A3$7A1$5A2$29|A3$7A1$6A1$6A1$7A3$29|A2$6A1$7A1$7A1$7A2$30|A1$8A1$8A1$8A1$8A1$27|A2$7A1$7A1$7A1$6A2$30|$1A1$6A1$1A1$53|$32A4$28|A1$8A1$54|$9A3$4A1$2A1$4A1$2A1$5A3$28|A1$7A3$5A1$2A1$4A1$2A1$4A3$29|$9A2$5A1$7A1$8A2$29|$3A1$5A3$4A1$2A1$4A1$2A1$5A3$28|$9A2$5A1$1A2$4A2$7A2$29|$2A1$6A1$6A3$6A1$7A1$30|$9A3$4A1$2A1$4A1$2A1$5A3$7A1$5A2$13|A1$7A3$5A1$2A1$4A1$2A1$4A1$2A1$28|A1$15A1$7A1$7A1$31|$1A1$15A1$7A1$7A1$7A1$6A1$15|A1$7A1$2A1$4A1$1A1$5A3$5A1$2A1$28|A1$7A1$7A1$7A1$7A1$31|$8A4$4A1$1A1$1A1$3A1$1A1$1A1$3A1$1A1$1A1$27|$8A3$5A1$2A1$4A1$2A1$4A1$2A1$28|$9A2$5A1$2A1$4A1$2A1$5A2$29|$8A3$5A1$2A1$4A1$2A1$4A3$5A1$7A1$15|$9A3$4A1$2A1$4A1$2A1$5A3$7A1$7A1$12|$8A1$1A1$5A2$6A1$7A1$31|$9A3$4A2$8A2$4A3$29|$1A1$6A3$6A1$7A1$8A1$29|$8A1$2A1$4A1$2A1$4A1$2A1$5A3$28|$8A1$2A1$4A1$2A1$4A1$1A1$6A1$30|$8A1$1A1$1A1$3A1$1A1$1A1$4A1$1A1$5A1$1A1$28|$8A1$1A1$6A1$7A1$6A1$1A1$29|$8A1$2A1$4A1$2A1$4A1$2A1$5A3$7A1$5A2$13|$8A4$6A1$6A1$6A4$28|$1A2$6A1$6A1$8A1$7A2$29|A1$7A1$7A1$7A1$7A1$31|A2$7A1$8A1$6A1$6A2$30|$1A1$1A1$4A1$1A1$53|$64|$64|$64",
  palette: { "A": "#ffffff" }
};

// src/scenes/Level.js
function Level(levelData) {
  const actorPool = root.actorPool;
  const sfxPool = root.sfxPool;
  const powerPool = root.powerPool;
  const dexpPool = root.dexpPool;
  const itemsPool = root.itemsPool;
  const o = Scene();
  const _destroy = o.destroy;
  const self = Object.assign(
    o,
    /** @type {TScene}*/
    {
      destroy: () => {
        actorPool.detach();
        sfxPool.detach();
        powerPool.detach();
        dexpPool.detach();
        itemsPool.detach();
        _destroy();
      }
    }
  );
  const stage = self.stage;
  const platforms = [];
  const enemies = [];
  const items = [];
  const reversers = [];
  const doors = [];
  const hurts = [];
  const enemyHiders = [];
  const enemyTriggers = [];
  const texts = [];
  let player;
  levelData.forEach((layer, i) => {
    if (i) {
      const layerName = layer.name;
      const entities = layer.entities;
      entities.forEach((entity) => {
        var _a, _b;
        const entityname = entity.name;
        const w = (_a = entity.width) != null ? _a : TILES.w;
        const h = (_b = entity.height) != null ? _b : TILES.h;
        const x = entity.x;
        const y = entity.y;
        const eValues = entity.values;
        const nodes = (
          /** @type {TNodes} */
          entity.nodes
        );
        const createRect = (color) => {
          const rect = Rectangle(0, 0, w, h, color);
          rect.x = x;
          rect.y = y;
          rect.visible = false;
          stage.add(rect);
          return rect;
        };
        if (layerName === "entities") {
          if (entityname === "player") {
            player = actorPool.getPlayer();
            player.reset();
            player.setBody(w, h, "#ff0000");
            player.x = x;
            player.y = y;
            player.addTo(stage);
          }
          if (entityname.includes("enemy")) {
            const eName = entityname.split("_")[1];
            const eType = (
              /** @type {TEnemyType} */
              eName
            );
            const eFlipH = (
              /** @type {number} */
              eValues["flipH"]
            );
            const eState = (
              /** @type {TEnemyState} */
              eValues["state"]
            );
            const triggered = (
              /** @type {boolean} */
              eValues["triggered"]
            );
            const enemy = actorPool.getEnemy(eType);
            enemy.reset();
            enemy.setBody(w, h, "#ff0000");
            enemy.flipH = eFlipH;
            enemy.x = x;
            enemy.y = y;
            enemy.addTo(stage, 0);
            enemies.push(enemy);
            if (triggered) {
              enemy.waitForTrigger(eState);
            } else {
              enemy.waitForTrigger(eState);
              enemy.onTrigger(null, eFlipH, false);
            }
          }
          if (entityname.includes("item")) {
            const eName = entityname.split("_")[0];
            const eType = (
              /** @type {TItemType} */
              eName
            );
            const item = itemsPool.get(eType);
            item.x = x;
            item.y = y;
            item.play();
            item.setBody(w, h);
            item.body.visible = false;
            item.addTo(stage, 0);
            items.push(item);
          }
          if (entityname === "triggerEnemy") {
            const rect = TriggerEnemy(nodes, w, h, "#257179");
            rect.x = x;
            rect.y = y;
            rect.visible = false;
            stage.add(rect);
            enemyTriggers.push(rect);
          }
          if (entityname === "hurt") {
            hurts.push(createRect());
          }
          if (entityname === "door") {
            doors.push(createRect());
          }
          if (entityname === "hideEnemy") {
            enemyHiders.push(createRect());
          }
        }
        if (layerName === "collision" && entityname === "platform") {
          platforms.push(createRect("#4ed72d"));
        }
        if (layerName === "reversers" && entityname === "reverser") {
          reversers.push(createRect("#ffcd75"));
        }
        if (layerName === "texts") {
          const txt = BitmapFont(TINY_FONT, TINY_FONT_FRAMES, TINY_FONT_TILESET_COLUMNS, eValues["text"]);
          if (eValues["name"]) {
            txt.name = eValues["name"];
          }
          txt.x = x + w / 2;
          txt.y = y;
          stage.add(txt);
          texts.push(txt);
        }
      });
    }
  });
  function doStressTest() {
    const spawnEnemy = () => {
      if (enemies.length >= 199) {
        return;
      }
      var enemy = actorPool.getEnemy("ryan");
      enemy.reset();
      enemy.x = GAME_WIDTH / 2;
      enemy.y = 0;
      enemy.addTo(stage, 0);
      enemies.push(enemy);
      enemy.setVisible(false, true);
      enemy.changeState("run");
      console.log("enemy:", enemies.length);
    };
    IntervalTimer(0.3, spawnEnemy);
  }
  self.update = () => {
    if (!store.loaded) {
      return;
    }
    store.loaded = true;
    updateEntities();
  };
  function updateEntities() {
    if (isPlayerActive()) {
      player.update();
      player.vsPlatforms(platforms, stage);
      player.vsEnemyTriggers(enemyTriggers, enemies, stage);
      player.vsHurts(hurts, stage);
      player.vsDoors(doors, stage);
    }
    enemies.forEach((enemy) => {
      if (enemy.active) {
        enemy.update();
        enemy.vsPlatforms(platforms, stage);
        enemy.vsReversers(reversers, stage);
        enemy.vsHurts(hurts, stage);
        enemy.vsHiders(enemyHiders, stage);
        if (isPlayerActive()) {
          enemy.vsPlayer(player, stage);
        }
      } else {
        if (!enemy.isToBeTriggered()) {
          const enemyIndex = getChildIndex(enemies, enemy);
          enemies.splice(enemyIndex, 1);
        }
      }
    });
    sfxPool.update();
    powerPool.update(stage, platforms, enemies);
    dexpPool.update(platforms, hurts);
    itemsPool.update(stage, player);
  }
  function isPlayerActive() {
    return player && player.active;
  }
  return self;
}
function LevelTilemap(tilesData) {
  const self = Scene();
  const stage = self.stage;
  const t = Tilemap(TILES, tilesData, GridCellsX);
  stage.add(t);
  return self;
}

// src/scenes/Level1.js
function Level1() {
  store.resetPlayerProgress();
  return Level(LEVEL1DATA);
}
function Level1Tilemap() {
  return LevelTilemap(LEVEL1DATA[0].data);
}

// media/endData.js
var ENDDATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "texts",
    "entities": [
      {
        "name": "text",
        "id": 0,
        "x": 24,
        "y": 32,
        "width": 8,
        "height": 8,
        "values": {
          "text": "- You Win!",
          "name": "win"
        }
      },
      {
        "name": "text",
        "id": 1,
        "x": 16,
        "y": 64,
        "width": 8,
        "height": 8,
        "values": {
          "text": "'R' to Restart",
          "name": "restart"
        }
      },
      {
        "name": "text",
        "id": 2,
        "x": 0,
        "y": 88,
        "width": 8,
        "height": 8,
        "values": {
          "text": "yellosubmarine.itch.io",
          "name": "link"
        }
      }
    ]
  }
];

// src/scenes/End.js
function End() {
  const texts = [];
  const levelData = ENDDATA;
  const self = Scene();
  const _destroy = self.destroy;
  const stage = self.stage;
  const bg = Rectangle(0, 0, GAME_WIDTH, GAME_HEIGHT);
  stage.add(bg);
  store.gameWin = true;
  self.destroy = () => {
    _destroy();
  };
  levelData.forEach((layer, i) => {
    if (i) {
      const layerName = layer.name;
      const entities = layer.entities;
      entities.forEach((entity) => {
        var _a, _b;
        const entityname = entity.name;
        const w = (_a = entity.width) != null ? _a : TILES.w;
        const h = (_b = entity.height) != null ? _b : TILES.h;
        const x = entity.x;
        const y = entity.y;
        const eValues = entity.values;
        const nodes = (
          /** @type {TNodes} */
          entity.nodes
        );
        if (layerName === "texts") {
          const txt = BitmapFont(TINY_FONT, TINY_FONT_FRAMES, TINY_FONT_TILESET_COLUMNS, eValues["text"]);
          if (eValues["name"]) {
            txt.name = eValues["name"];
          }
          txt.x = x + w / 2;
          txt.y = y;
          stage.add(txt);
          texts.push(txt);
        }
      });
    }
  });
  function setRestartTextVisibility(visible = true) {
    texts.forEach((txt) => {
      if (txt.name === "restart") {
        txt.visible = visible;
      }
    });
  }
  function setLinkTextVisibility(visible = true) {
    texts.forEach((txt) => {
      if (txt.name === "link") {
        txt.visible = visible;
      }
    });
  }
  setRestartTextVisibility(false);
  WaitTimer(4, () => {
    setLinkTextVisibility(false);
  });
  WaitTimer(2, () => {
    setRestartTextVisibility(true);
  });
  btn.is("restart").onDown = () => {
    if (store.gameWin) {
      Sound.music();
      store.gameWin = false;
      root.scene.set(1);
    }
  };
  Sound.killMusic();
  Sound.play("fxWin");
  return self;
}

// media/uiAssets.js
var APPLE_SELECTED_ICON = {
  w: 16,
  h: 16,
  frames: "$21A1B3A1$12B3$14A1$27C1D8C1$6D1$2E1F1$1E1$2D1$6D1$3E1F1$3D1$6D1$1G1B1G2B1G1$1D1$6D1$1H1D1A1B2H1$1D1$6D1$1H2D1H3$1D1$6D1$1G1H4G1$1D1$6C1D8C1$51|$5A1B3A1$12B3$14A1$44C1D6C1$8D1$1E1F1$1E1$1D1$8D1$2E1F1$2D1$8D1G1B1G2B1G1D1$8D1H1D1A1B2H1D1$8D1H2D1H3D1$8D1G1H4G1D1$8C1D6C1$52",
  palette: { "A": "#ffcd75", "B": "#ef7d57", "C": "#41a6f6", "D": "#f4f4f4", "E": "#38b764", "F": "#257179", "G": "#5d275d", "H": "#b13e53" },
  fps: 5
};
var APPLE_STATIC_ICON = {
  w: 16,
  h: 16,
  frames: "$102A1B1$1A1$13A1B1$12C1D1C2D1C1$10E1F1G1D2E1$10E2F1E3$10C1E4C1$11E2C1E1$54",
  palette: { "A": "#38b764", "B": "#257179", "C": "#5d275d", "D": "#ef7d57", "E": "#b13e53", "F": "#f4f4f4", "G": "#ffcd75" },
  fps: 1
};
var CORN_SELECTED_ICON = {
  w: 16,
  h: 16,
  frames: "$21A1B3A1$12B3$14A1$27C1D8C1$6D1$5D1B1$1D1$6D1$1E2F1D1B1A1$1D1$6D1$2F1D1B1A1B1$1D1$6D1$1F1A1B1A1B1$2D1$6D1$1E1B1A1E2$2D1$6D1$1E1F1E1F1E1$2D1$6C1D8C1$51|$5A1B3A1$12B3$14A1$44C1D6C1$8D1$4D1B1D1$8D1E2F1D1B1A1D1$8D1$1F1D1B1A1B1D1$8D1F1A1B1A1B1$1D1$8D1E1B1A1E2$1D1$8D1E1F1E1F1E1$1D1$8C1D6C1$52",
  palette: { "A": "#ffcd75", "B": "#ef7d57", "C": "#41a6f6", "D": "#f4f4f4", "E": "#38b764", "F": "#257179" },
  fps: 5
};
var CORN_STATIC_ICON = {
  w: 16,
  h: 16,
  frames: "$105A1B1$10C2D1A1B1E1$11D1A1B1E1B1$10D1E1B1E1B1$11C1B1E1C2$11C1D1C1D1C1$11D1C1$1D1$55",
  palette: { "A": "#f4f4f4", "B": "#ef7d57", "C": "#38b764", "D": "#257179", "E": "#ffcd75" },
  fps: 1
};

// src/entities/IconBase.js
function IconBase(name, width = 0, height = 0, color = "#fff") {
  const body = Rectangle(0, 0, width, height, color);
  body.name = `${name}.body`;
  const self = {
    x: 0,
    y: 0,
    width,
    height,
    name,
    body,
    addTo: (group, index) => {
      if (index !== void 0) {
        group.addAt(self.body, index);
        group.addAt(self.skin, index);
      } else {
        group.add(self.body);
        group.add(self.skin);
      }
      self.parent = group;
    },
    setBody: (width2, height2, color2) => {
      self.body.width = width2;
      self.body.height = height2;
      self.body.color = color2 ? color2 : self.body.color;
    },
    addSkin: (list) => {
      self.skin = MovieClip(list);
      self.skin.name = `${name}.skin`;
    },
    update: () => {
      self.body.update();
      updateSkin();
    },
    render: (ctx) => {
      self.body.render(ctx);
      self.skin.render(ctx);
    },
    reset: () => {
      if (self.skin) {
        self.skin.stop();
      }
      self.parent = null;
    },
    detach: () => {
      self.skin.detach();
      self.body.detach();
      self.parent = null;
      self.reserved = false;
    },
    play: (animName) => {
      if (self.skin) {
        self.skin.play(animName);
      }
    }
  };
  function updateSkin() {
    const skin = self.skin;
    if (skin) {
      skin.x = self.body.x;
      skin.y = self.body.y;
      skin.update();
    }
  }
  Object.defineProperties(self, {
    x: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.x = value;
      },
      get: () => {
        return self.body.x;
      }
    },
    y: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.y = value;
      },
      get: () => {
        return self.body.y;
      }
    },
    width: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.width = value;
      },
      get: () => {
        return self.body.width;
      }
    },
    height: {
      /**
       * @param {number} value
       */
      set: (value) => {
        self.body.height = value;
      },
      get: () => {
        return self.body.height;
      }
    },
    active: {
      get: () => {
        return self.skin.parent && self.body.parent && !self.skin.visible;
      }
    }
  });
  return self;
}

// src/entities/AppleIcon.js
function AppleIcon(name, width, height, color) {
  const self = IconBase(name, width, height, color);
  self.addSkin({
    selected: { texture: APPLE_SELECTED_ICON, loop: true },
    idle: { texture: APPLE_STATIC_ICON, loop: false }
  });
  self.skin.play("idle");
  self.skin.onComplete = (animName) => {
  };
  return self;
}

// src/entities/CornIcon.js
function CornIcon(name, width, height, color) {
  const self = IconBase(name, width, height, color);
  self.addSkin({
    selected: { texture: CORN_SELECTED_ICON, loop: true },
    idle: { texture: CORN_STATIC_ICON, loop: false }
  });
  self.skin.play("idle");
  self.skin.onComplete = (animName) => {
  };
  return self;
}

// media/hudData.js
var HUDDATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "hud",
    "entities": [
      {
        "name": "appleIcon",
        "id": 0,
        "x": 0,
        "y": 0,
        "width": 16,
        "height": 16
      },
      {
        "name": "cornIcon",
        "id": 1,
        "x": 32,
        "y": 0,
        "width": 16,
        "height": 16
      }
    ]
  }
];

// src/GameUtils.js
function Text(value) {
  const btext = BitmapFont(TINY_FONT, TINY_FONT_FRAMES, TINY_FONT_TILESET_COLUMNS, value);
  return btext;
}

// src/scenes/TransitionScreen.js
function TransitionScreen() {
  let active = true;
  const lifetime = 3;
  const o = Rectangle(0, 0, GAME_WIDTH, GAME_HEIGHT);
  const loadingText = Text("Loading...");
  const self = Object.assign(
    o,
    /** @type {TTransitionScreen}*/
    {
      addTo: (group, index) => {
        if (index !== void 0) {
          group.addAt(self, index);
        } else {
          group.add(self);
        }
        loadingText.x = GAME_WIDTH / 2 - 15;
        loadingText.y = GAME_HEIGHT / 2;
        group.add(loadingText);
        self.parent = group;
        WaitTimer(lifetime, self.kill);
      },
      kill: () => {
        self.detach();
        loadingText.detach();
        active = false;
      }
    }
  );
  Object.defineProperties(self, {
    active: {
      get: () => {
        return active;
      }
    }
  });
  return self;
}

// src/scenes/Hud.js
var appleIcon;
var cornIcon;
var appleText;
var cornText;
function Hud() {
  const levelData = HUDDATA;
  const self = Scene();
  const stage = self.stage;
  const _destroy = self.destroy;
  self.destroy = () => {
    if (appleIcon) {
      appleIcon.detach();
      cornIcon.detach();
      appleText.detach();
      cornText.detach();
    }
    _destroy();
  };
  levelData.forEach((layer, i) => {
    if (i) {
      const layerName = layer.name;
      const entities = layer.entities;
      entities.forEach((entity) => {
        var _a, _b;
        const entityname = entity.name;
        const w = (_a = entity.width) != null ? _a : TILES.w;
        const h = (_b = entity.height) != null ? _b : TILES.h;
        const x = entity.x;
        const y = entity.y;
        const eValues = entity.values;
        const nodes = (
          /** @type {TNodes} */
          entity.nodes
        );
        const createIcon = (icon, newIcon) => {
          if (icon) {
            icon.reset();
          } else {
            icon = newIcon;
          }
          icon.x = x;
          icon.y = y;
          icon.addTo(stage);
          icon.body.visible = false;
          return icon;
        };
        if (layerName === "hud") {
          if (entityname === "appleIcon") {
            appleIcon = createIcon(appleIcon, AppleIcon(entityname, w, h));
          }
          if (entityname === "cornIcon") {
            cornIcon = createIcon(cornIcon, CornIcon(entityname, w, h));
          }
        }
      });
    }
  });
  function createText(txt, x, y) {
    txt = txt || BitmapFont(TINY_FONT, TINY_FONT_FRAMES, TINY_FONT_TILESET_COLUMNS, "x0");
    txt.x = x;
    txt.y = y;
    stage.add(txt);
    return txt;
  }
  appleText = createText(appleText, 14, 8);
  cornText = createText(cornText, 15 * 3, 8);
  let transition = TransitionScreen();
  if (!store.loaded) {
    transition.addTo(stage);
  }
  function isTransitionCompleted() {
    return transition && transition.active && !store.loaded;
  }
  self.update = () => {
    if (!isTransitionCompleted) {
      return;
    }
    store.loaded = true;
    transition = null;
    const totalApple = store.fireBall.total;
    const totalCorn = store.laserBeam.total;
    appleIcon.update();
    cornIcon.update();
    appleText.text = `x${totalApple}`;
    cornText.text = `x${totalCorn}`;
    if (store.currentPowerName === "fireball") {
      cornIcon.play("idle");
      if (totalApple > 0) {
        appleIcon.play("selected");
      } else {
        appleIcon.play("idle");
      }
    }
    if (store.currentPowerName === "laserBeam") {
      appleIcon.play("idle");
      if (totalCorn > 0) {
        cornIcon.play("selected");
      } else {
        cornIcon.play("idle");
      }
    }
  };
  function setVisibility(visible = true) {
    appleIcon.skin.visible = visible;
    cornIcon.skin.visible = visible;
    appleText.visible = visible;
    cornText.visible = visible;
  }
  return self;
}

// media/level2Data.js
var LEVEL2DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      -1,
      -1,
      36,
      37,
      -1,
      -1,
      48,
      49,
      32,
      50,
      51,
      41,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      54,
      55,
      41,
      56,
      57,
      -1,
      33,
      38,
      39,
      -1,
      41,
      39,
      40,
      31,
      39,
      40,
      41,
      32,
      -1,
      44,
      45,
      46,
      47,
      45,
      46,
      44,
      45,
      46,
      47,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      11,
      10,
      4,
      4,
      10,
      10,
      10,
      -1,
      3,
      1,
      15,
      16,
      5,
      6,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      8,
      12,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      14,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 96,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 96,
        "y": 0,
        "width": 8,
        "height": 72
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "player",
        "id": 1,
        "x": 0,
        "y": 48
      },
      {
        "name": "door",
        "id": 5,
        "x": 88,
        "y": 24,
        "width": 8,
        "height": 32
      },
      {
        "name": "apple_item",
        "id": 6,
        "x": 48,
        "y": 48,
        "width": 8,
        "height": 8
      },
      {
        "name": "enemy_thor",
        "id": 7,
        "x": 72,
        "y": 48,
        "values": {
          "flipH": -1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "triggerEnemy",
        "id": 8,
        "x": 16,
        "y": 32,
        "width": 8,
        "height": 24,
        "nodes": [
          {
            "x": 72,
            "y": 48
          }
        ]
      },
      {
        "name": "hideEnemy",
        "id": 9,
        "x": 8,
        "y": 48,
        "width": 8,
        "height": 8
      }
    ]
  },
  {
    "name": "texts",
    "entities": [
      {
        "name": "text",
        "id": 0,
        "x": 0,
        "y": 80,
        "width": 8,
        "height": 8,
        "values": {
          "text": "Press 'X' to Shoot",
          "name": "shoot"
        }
      }
    ]
  }
];

// src/scenes/Level2.js
function Level2() {
  return Level(LEVEL2DATA);
}
function Level2Tilemap() {
  return LevelTilemap(LEVEL2DATA[0].data);
}

// media/level3Data.js
var LEVEL3DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      -1,
      42,
      -1,
      44,
      -1,
      -1,
      -1,
      40,
      41,
      32,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      43,
      -1,
      46,
      47,
      50,
      51,
      40,
      46,
      47,
      -1,
      30,
      -1,
      -1,
      -1,
      43,
      44,
      56,
      57,
      49,
      36,
      31,
      41,
      -1,
      38,
      -1,
      -1,
      -1,
      40,
      41,
      -1,
      32,
      -1,
      46,
      47,
      -1,
      -1,
      -1,
      -1,
      -1,
      46,
      47,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      0,
      15,
      1,
      4,
      18,
      19,
      -1,
      -1,
      1,
      1,
      1,
      5,
      7,
      7,
      7,
      8,
      24,
      25,
      6,
      7,
      7,
      7,
      7,
      7,
      12,
      13,
      13,
      14,
      12,
      13,
      14,
      14,
      13,
      13,
      12,
      12,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 32,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 96,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 3,
        "x": 48,
        "y": 56,
        "width": 56,
        "height": 8
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "player",
        "id": 1,
        "x": 0,
        "y": 48
      },
      {
        "name": "hurt",
        "id": 4,
        "x": 24,
        "y": 64,
        "width": 32,
        "height": 8
      },
      {
        "name": "door",
        "id": 5,
        "x": 88,
        "y": 24,
        "width": 8,
        "height": 32
      },
      {
        "name": "apple_item",
        "id": 6,
        "x": 40,
        "y": 40,
        "width": 8,
        "height": 8
      }
    ]
  },
  {
    "name": "texts",
    "entities": [
      {
        "name": "text",
        "id": 0,
        "x": 0,
        "y": 80,
        "width": 8,
        "height": 8,
        "values": {
          "text": "Press 'z' to Jump",
          "name": "jump"
        }
      }
    ]
  }
];

// src/scenes/Level3.js
function Level3() {
  return Level(LEVEL3DATA);
}
function Level3Tilemap() {
  return LevelTilemap(LEVEL3DATA[0].data);
}

// media/level4Data.js
var LEVEL4DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      36,
      -1,
      36,
      -1,
      -1,
      48,
      49,
      36,
      32,
      -1,
      -1,
      47,
      -1,
      -1,
      48,
      -1,
      -1,
      54,
      -1,
      40,
      41,
      50,
      51,
      54,
      -1,
      -1,
      30,
      55,
      -1,
      32,
      36,
      46,
      47,
      56,
      57,
      54,
      42,
      48,
      49,
      42,
      43,
      -1,
      42,
      54,
      40,
      41,
      31,
      43,
      -1,
      54,
      55,
      -1,
      -1,
      -1,
      -1,
      -1,
      46,
      47,
      43,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      11,
      -1,
      -1,
      0,
      10,
      18,
      19,
      -1,
      10,
      4,
      4,
      10,
      5,
      6,
      7,
      7,
      8,
      24,
      25,
      24,
      6,
      7,
      7,
      7,
      8,
      12,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      14,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 32,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 96,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 3,
        "x": 56,
        "y": 56,
        "width": 48,
        "height": 8
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "player",
        "id": 1,
        "x": 0,
        "y": 48
      },
      {
        "name": "door",
        "id": 5,
        "x": 88,
        "y": 24,
        "width": 8,
        "height": 32
      },
      {
        "name": "corn_item",
        "id": 7,
        "x": 40,
        "y": 40,
        "width": 8,
        "height": 8
      },
      {
        "name": "apple_item",
        "id": 8,
        "x": 72,
        "y": 48,
        "width": 8,
        "height": 8
      },
      {
        "name": "hurt",
        "id": 9,
        "x": 24,
        "y": 64,
        "width": 40,
        "height": 8
      }
    ]
  },
  {
    "name": "texts",
    "entities": [
      {
        "name": "text",
        "id": 0,
        "x": 8,
        "y": 80,
        "width": 8,
        "height": 8,
        "values": {
          "text": "Press 'C' to Switch",
          "name": "switch"
        }
      }
    ]
  }
];

// src/scenes/Level4.js
function Level4() {
  return Level(LEVEL4DATA);
}
function Level4Tilemap() {
  return LevelTilemap(LEVEL4DATA[0].data);
}

// media/level5Data.js
var LEVEL5DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      38,
      39,
      37,
      -1,
      -1,
      -1,
      38,
      33,
      -1,
      40,
      -1,
      31,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      45,
      37,
      50,
      51,
      40,
      32,
      -1,
      32,
      38,
      -1,
      45,
      -1,
      38,
      39,
      56,
      57,
      32,
      42,
      43,
      -1,
      44,
      45,
      -1,
      -1,
      44,
      45,
      -1,
      38,
      39,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      44,
      45,
      -1,
      -1,
      -1,
      -1,
      9,
      -1,
      -1,
      -1,
      -1,
      10,
      16,
      11,
      16,
      16,
      1,
      4,
      15,
      15,
      5,
      3,
      1,
      16,
      1,
      5,
      6,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      8,
      12,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      14,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 96,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 96,
        "y": 0,
        "width": 8,
        "height": 72
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "player",
        "id": 1,
        "x": 8,
        "y": 48
      },
      {
        "name": "triggerEnemy",
        "id": 2,
        "x": 40,
        "y": 24,
        "width": 8,
        "height": 32,
        "nodes": [
          {
            "x": 80,
            "y": 48
          },
          {
            "x": 16,
            "y": 48
          }
        ]
      },
      {
        "name": "enemy_mojo",
        "id": 3,
        "x": 80,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "enemy_ryan",
        "id": 4,
        "x": 16,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "door",
        "id": 5,
        "x": 88,
        "y": 24,
        "width": 8,
        "height": 32
      }
    ]
  },
  {
    "name": "reversers",
    "entities": [
      {
        "name": "reverser",
        "id": 0,
        "x": 0,
        "y": 48,
        "height": 8
      },
      {
        "name": "reverser",
        "id": 1,
        "x": 88,
        "y": 48,
        "height": 8
      }
    ]
  }
];

// src/scenes/Level5.js
function Level5() {
  return Level(LEVEL5DATA);
}
function Level5Tilemap() {
  return LevelTilemap(LEVEL5DATA[0].data);
}

// media/level6Data.js
var LEVEL6DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      -1,
      39,
      40,
      41,
      -1,
      39,
      40,
      41,
      -1,
      -1,
      -1,
      30,
      -1,
      -1,
      46,
      -1,
      -1,
      -1,
      46,
      47,
      32,
      50,
      51,
      -1,
      -1,
      -1,
      -1,
      48,
      -1,
      40,
      32,
      37,
      -1,
      56,
      57,
      -1,
      36,
      37,
      30,
      54,
      45,
      46,
      47,
      49,
      48,
      49,
      48,
      32,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      54,
      55,
      54,
      55,
      54,
      55,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      0,
      15,
      1,
      4,
      18,
      19,
      -1,
      -1,
      1,
      1,
      1,
      5,
      7,
      7,
      7,
      8,
      24,
      25,
      24,
      6,
      7,
      7,
      7,
      7,
      12,
      13,
      13,
      14,
      12,
      13,
      14,
      14,
      13,
      13,
      12,
      12,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 32,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 96,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 3,
        "x": 56,
        "y": 56,
        "width": 40,
        "height": 8
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "player",
        "id": 1,
        "x": 0,
        "y": 48
      },
      {
        "name": "triggerEnemy",
        "id": 2,
        "x": 40,
        "y": 24,
        "width": 8,
        "height": 32,
        "nodes": [
          {
            "x": 80,
            "y": 48
          }
        ]
      },
      {
        "name": "enemy_mojo",
        "id": 3,
        "x": 80,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "hurt",
        "id": 4,
        "x": 24,
        "y": 64,
        "width": 40,
        "height": 8
      },
      {
        "name": "door",
        "id": 5,
        "x": 88,
        "y": 24,
        "width": 8,
        "height": 32
      },
      {
        "name": "corn_item",
        "id": 6,
        "x": 40,
        "y": 40,
        "width": 8,
        "height": 8
      }
    ]
  },
  {
    "name": "reversers",
    "entities": [
      {
        "name": "reverser",
        "id": 0,
        "x": 48,
        "y": 48,
        "height": 8
      },
      {
        "name": "reverser",
        "id": 1,
        "x": 88,
        "y": 48,
        "height": 8
      }
    ]
  }
];

// src/scenes/Level6.js
function Level6() {
  return Level(LEVEL6DATA);
}
function Level6Tilemap() {
  return LevelTilemap(LEVEL6DATA[0].data);
}

// media/level7Data.js
var LEVEL7DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      38,
      -1,
      40,
      38,
      -1,
      -1,
      30,
      -1,
      40,
      48,
      40,
      40,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      39,
      40,
      50,
      51,
      31,
      43,
      -1,
      -1,
      39,
      32,
      43,
      -1,
      45,
      46,
      56,
      57,
      43,
      -1,
      32,
      37,
      45,
      46,
      -1,
      32,
      46,
      39,
      40,
      -1,
      -1,
      -1,
      42,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      45,
      46,
      -1,
      0,
      1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6,
      7,
      0,
      16,
      1,
      4,
      16,
      16,
      10,
      10,
      15,
      2,
      20,
      20,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      21,
      20,
      12,
      13,
      13,
      13,
      13,
      13,
      13,
      12,
      13,
      13,
      13,
      14,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 96,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 104,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 4,
        "x": 80,
        "y": 40,
        "width": 24,
        "height": 24
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "triggerEnemy",
        "id": 2,
        "x": 40,
        "y": 32,
        "width": 8,
        "height": 24,
        "nodes": [
          {
            "x": 56,
            "y": 48
          }
        ]
      },
      {
        "name": "enemy_mojo",
        "id": 3,
        "x": 56,
        "y": 48,
        "values": {
          "flipH": -1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "door",
        "id": 5,
        "x": 96,
        "y": 16,
        "width": 8,
        "height": 32
      },
      {
        "name": "enemy_thor",
        "id": 6,
        "x": 64,
        "y": 48,
        "values": {
          "flipH": -1,
          "state": "run",
          "triggered": false
        }
      },
      {
        "name": "enemy_ryan",
        "id": 7,
        "x": 88,
        "y": 32,
        "values": {
          "flipH": -1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "triggerEnemy",
        "id": 9,
        "x": 24,
        "y": 32,
        "width": 8,
        "height": 24,
        "nodes": [
          {
            "x": 88,
            "y": 32
          }
        ]
      },
      {
        "name": "player",
        "id": 10,
        "x": 0,
        "y": 48
      },
      {
        "name": "hideEnemy",
        "id": 11,
        "x": 8,
        "y": 48,
        "width": 8,
        "height": 8
      },
      {
        "name": "apple_item",
        "id": 12,
        "x": 80,
        "y": 24,
        "width": 8,
        "height": 8
      }
    ]
  }
];

// src/scenes/Level7.js
function Level7() {
  return Level(LEVEL7DATA);
}
function Level7Tilemap() {
  return LevelTilemap(LEVEL7DATA[0].data);
}

// media/level8Data.js
var LEVEL8DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      -1,
      -1,
      37,
      -1,
      -1,
      32,
      37,
      -1,
      -1,
      32,
      36,
      37,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      43,
      50,
      51,
      -1,
      42,
      43,
      -1,
      43,
      -1,
      -1,
      -1,
      36,
      37,
      56,
      57,
      38,
      -1,
      -1,
      -1,
      -1,
      42,
      43,
      -1,
      42,
      43,
      -1,
      -1,
      -1,
      38,
      32,
      2,
      3,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7,
      7,
      10,
      10,
      9,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      10,
      20,
      20,
      15,
      16,
      15,
      5,
      -1,
      -1,
      3,
      4,
      16,
      16,
      21,
      20,
      7,
      7,
      7,
      8,
      24,
      25,
      6,
      7,
      7,
      7,
      13,
      14,
      13,
      13,
      13,
      13,
      13,
      12,
      13,
      13,
      13,
      14,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 48,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 104,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 4,
        "x": 64,
        "y": 56,
        "width": 40,
        "height": 8
      },
      {
        "name": "platform",
        "id": 5,
        "x": -8,
        "y": 40,
        "width": 24,
        "height": 32
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "triggerEnemy",
        "id": 2,
        "x": 40,
        "y": 32,
        "width": 8,
        "height": 24,
        "nodes": [
          {
            "x": 16,
            "y": 48
          },
          {
            "x": 8,
            "y": 32
          }
        ]
      },
      {
        "name": "enemy_mojo",
        "id": 3,
        "x": 16,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "door",
        "id": 5,
        "x": 96,
        "y": 24,
        "width": 8,
        "height": 32
      },
      {
        "name": "enemy_thor",
        "id": 6,
        "x": 8,
        "y": 32,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "enemy_ryan",
        "id": 7,
        "x": 88,
        "y": 48,
        "values": {
          "flipH": -1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "triggerEnemy",
        "id": 9,
        "x": 56,
        "y": 32,
        "width": 8,
        "height": 24,
        "nodes": [
          {
            "x": 88,
            "y": 48
          }
        ]
      },
      {
        "name": "player",
        "id": 10,
        "x": 0,
        "y": 32
      },
      {
        "name": "hurt",
        "id": 11,
        "x": 40,
        "y": 64,
        "width": 32,
        "height": 8
      },
      {
        "name": "corn_item",
        "id": 12,
        "x": 48,
        "y": 40,
        "width": 8,
        "height": 8
      },
      {
        "name": "apple_item",
        "id": 13,
        "x": 24,
        "y": 40,
        "width": 8,
        "height": 8
      }
    ]
  }
];

// src/scenes/Level8.js
function Level8() {
  return Level(LEVEL8DATA);
}
function Level8Tilemap() {
  return LevelTilemap(LEVEL8DATA[0].data);
}

// media/level9Data.js
var LEVEL9DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      38,
      -1,
      38,
      -1,
      -1,
      38,
      -1,
      -1,
      -1,
      38,
      -1,
      32,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      31,
      50,
      51,
      36,
      37,
      -1,
      -1,
      -1,
      43,
      -1,
      38,
      -1,
      -1,
      56,
      57,
      42,
      32,
      37,
      32,
      37,
      -1,
      32,
      -1,
      -1,
      38,
      -1,
      38,
      -1,
      -1,
      -1,
      42,
      43,
      -1,
      36,
      37,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5,
      4,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6,
      7,
      7,
      7,
      16,
      4,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      26,
      -1,
      7,
      8,
      -1,
      -1,
      -1,
      6,
      8,
      -1,
      -1,
      -1,
      -1,
      -1,
      20,
      20,
      16,
      10,
      5,
      -1,
      19,
      -1,
      18,
      19,
      18,
      4,
      21,
      20,
      7,
      7,
      7,
      24,
      24,
      25,
      24,
      24,
      25,
      7,
      13,
      14,
      13,
      13,
      13,
      13,
      13,
      12,
      13,
      13,
      13,
      14
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": -8,
        "y": 64,
        "width": 24,
        "height": 32
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 24,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 8,
        "y": 80,
        "width": 32,
        "height": 16
      },
      {
        "name": "platform",
        "id": 4,
        "x": 64,
        "y": 48,
        "width": 48,
        "height": 8
      },
      {
        "name": "platform",
        "id": 5,
        "x": 40,
        "y": 64,
        "width": 16,
        "height": 8
      },
      {
        "name": "platform",
        "id": 6,
        "x": 104,
        "y": 8,
        "width": 8,
        "height": 56
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "door",
        "id": 5,
        "x": 96,
        "y": 24,
        "width": 8,
        "height": 32
      },
      {
        "name": "player",
        "id": 10,
        "x": 0,
        "y": 56
      },
      {
        "name": "hurt",
        "id": 11,
        "x": 32,
        "y": 88,
        "width": 64,
        "height": 8
      },
      {
        "name": "triggerEnemy",
        "id": 12,
        "x": 40,
        "y": 48,
        "width": 8,
        "height": 16,
        "nodes": [
          {
            "x": 8,
            "y": 56
          },
          {
            "x": 72,
            "y": 40
          }
        ]
      },
      {
        "name": "enemy_ryan",
        "id": 13,
        "x": 16,
        "y": 72,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "enemy_ryan",
        "id": 16,
        "x": 72,
        "y": 40,
        "values": {
          "flipH": -1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "enemy_mojo",
        "id": 17,
        "x": 8,
        "y": 56,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "triggerEnemy",
        "id": 18,
        "x": 32,
        "y": 72,
        "width": 8,
        "height": 8,
        "nodes": [
          {
            "x": 16,
            "y": 72
          }
        ]
      },
      {
        "name": "corn_item",
        "id": 19,
        "x": 40,
        "y": 24,
        "width": 8,
        "height": 8
      },
      {
        "name": "apple_item",
        "id": 20,
        "x": 24,
        "y": 64,
        "width": 8,
        "height": 8
      }
    ]
  },
  {
    "name": "reversers",
    "entities": [
      {
        "name": "reverser",
        "id": 0,
        "x": 56,
        "y": 40,
        "height": 24
      },
      {
        "name": "reverser",
        "id": 1,
        "x": 88,
        "y": 40,
        "height": 16
      }
    ]
  }
];

// src/scenes/Level9.js
function Level9() {
  return Level(LEVEL9DATA);
}
function Level9Tilemap() {
  return LevelTilemap(LEVEL9DATA[0].data);
}

// media/level10Data.js
var LEVEL10DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      32,
      -1,
      -1,
      -1,
      38,
      39,
      32,
      39,
      -1,
      -1,
      40,
      31,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      45,
      50,
      51,
      40,
      43,
      42,
      43,
      42,
      43,
      32,
      -1,
      -1,
      -1,
      56,
      57,
      46,
      40,
      -1,
      -1,
      -1,
      -1,
      -1,
      44,
      32,
      -1,
      42,
      43,
      31,
      32,
      7,
      7,
      7,
      8,
      -1,
      -1,
      -1,
      36,
      37,
      -1,
      46,
      43,
      22,
      20,
      21,
      22,
      -1,
      -1,
      -1,
      42,
      43,
      -1,
      -1,
      -1,
      21,
      20,
      12,
      26,
      7,
      8,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      20,
      20,
      -1,
      -1,
      21,
      22,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      21,
      20,
      -1,
      -1,
      14,
      21,
      7,
      8,
      -1,
      -1,
      -1,
      -1,
      21,
      22,
      -1,
      9,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      21,
      20,
      16,
      15,
      0,
      1,
      1,
      10,
      10,
      3,
      16,
      4,
      13,
      14,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": -8,
        "y": 32,
        "width": 40,
        "height": 24
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": -32,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 5,
        "x": 32,
        "y": 64,
        "width": 32,
        "height": 8
      },
      {
        "name": "platform",
        "id": 6,
        "x": 104,
        "y": -24,
        "width": 8,
        "height": 120
      },
      {
        "name": "platform",
        "id": 7,
        "x": 0,
        "y": 48,
        "width": 16,
        "height": 48
      },
      {
        "name": "platform",
        "id": 8,
        "x": 32,
        "y": 48,
        "width": 16,
        "height": 24
      },
      {
        "name": "platform",
        "id": 10,
        "x": 0,
        "y": 88,
        "width": 112,
        "height": 8
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "door",
        "id": 5,
        "x": 96,
        "y": 24,
        "width": 8,
        "height": 64
      },
      {
        "name": "player",
        "id": 10,
        "x": 0,
        "y": 24
      },
      {
        "name": "triggerEnemy",
        "id": 14,
        "x": 48,
        "y": 8,
        "width": 8,
        "height": 40,
        "nodes": [
          {
            "x": 16,
            "y": 24
          }
        ]
      },
      {
        "name": "enemy_ryan",
        "id": 15,
        "x": 16,
        "y": 24,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "triggerEnemy",
        "id": 16,
        "x": 64,
        "y": 24,
        "width": 8,
        "height": 40,
        "nodes": [
          {
            "x": 40,
            "y": 40
          },
          {
            "x": 32,
            "y": 40
          }
        ]
      },
      {
        "name": "enemy_thor",
        "id": 17,
        "x": 32,
        "y": 40,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "triggerEnemy",
        "id": 19,
        "x": 72,
        "y": 40,
        "width": 8,
        "height": 48,
        "nodes": [
          {
            "x": 48,
            "y": 56
          },
          {
            "x": 80,
            "y": 80
          }
        ]
      },
      {
        "name": "enemy_mojo",
        "id": 20,
        "x": 48,
        "y": 56,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "triggerEnemy",
        "id": 21,
        "x": 40,
        "y": 72,
        "width": 8,
        "height": 16,
        "nodes": [
          {
            "x": 64,
            "y": 80
          }
        ]
      },
      {
        "name": "enemy_thor",
        "id": 22,
        "x": 64,
        "y": 80,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "corn_item",
        "id": 25,
        "x": 32,
        "y": 80,
        "width": 8,
        "height": 8
      },
      {
        "name": "apple_item",
        "id": 27,
        "x": 16,
        "y": 64,
        "width": 8,
        "height": 8
      },
      {
        "name": "enemy_ryan",
        "id": 28,
        "x": 80,
        "y": 80,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      }
    ]
  },
  {
    "name": "reversers",
    "entities": [
      {
        "name": "reverser",
        "id": 0,
        "x": 88,
        "y": 80,
        "height": 8
      },
      {
        "name": "reverser",
        "id": 1,
        "x": 16,
        "y": 80,
        "height": 8
      }
    ]
  }
];

// src/scenes/Level10.js
function Level10() {
  return Level(LEVEL10DATA);
}
function Level10Tilemap() {
  return LevelTilemap(LEVEL10DATA[0].data);
}

// media/level11Data.js
var LEVEL11DATA = [
  {
    "name": "background",
    "tileset": "tiles",
    "data": [
      37,
      -1,
      -1,
      39,
      -1,
      38,
      39,
      32,
      49,
      37,
      32,
      33,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      45,
      54,
      32,
      43,
      44,
      45,
      -1,
      -1,
      55,
      -1,
      55,
      39,
      50,
      51,
      42,
      -1,
      48,
      49,
      -1,
      -1,
      45,
      43,
      -1,
      45,
      56,
      57,
      -1,
      42,
      31,
      55,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      42,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      9,
      0,
      1,
      10,
      10,
      1,
      15,
      5,
      3,
      10,
      1,
      15,
      15,
      6,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      8,
      12,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      13,
      14,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  },
  {
    "name": "collision",
    "entities": [
      {
        "name": "platform",
        "id": 0,
        "x": 0,
        "y": 56,
        "width": 112,
        "height": 8
      },
      {
        "name": "platform",
        "id": 1,
        "x": -8,
        "y": 0,
        "width": 8,
        "height": 72
      },
      {
        "name": "platform",
        "id": 2,
        "x": 104,
        "y": 0,
        "width": 8,
        "height": 72
      }
    ]
  },
  {
    "name": "entities",
    "entities": [
      {
        "name": "player",
        "id": 1,
        "x": 0,
        "y": 48
      },
      {
        "name": "triggerEnemy",
        "id": 2,
        "x": 40,
        "y": 24,
        "width": 8,
        "height": 32,
        "nodes": [
          {
            "x": 80,
            "y": 48
          },
          {
            "x": 16,
            "y": 48
          }
        ]
      },
      {
        "name": "enemy_mojo",
        "id": 3,
        "x": 80,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "enemy_ryan",
        "id": 4,
        "x": 16,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "enemy_mojo",
        "id": 6,
        "x": 72,
        "y": 48,
        "values": {
          "flipH": -1,
          "state": "run",
          "triggered": false
        }
      },
      {
        "name": "enemy_ryan",
        "id": 7,
        "x": 48,
        "y": 48,
        "values": {
          "flipH": -1,
          "state": "run",
          "triggered": false
        }
      },
      {
        "name": "enemy_thor",
        "id": 8,
        "x": 32,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": false
        }
      },
      {
        "name": "triggerEnemy",
        "id": 9,
        "x": 56,
        "y": 32,
        "width": 8,
        "height": 24,
        "nodes": [
          {
            "x": 8,
            "y": 48
          }
        ]
      },
      {
        "name": "enemy_mojo",
        "id": 10,
        "x": 8,
        "y": 48,
        "values": {
          "flipH": 1,
          "state": "rise",
          "triggered": true
        }
      },
      {
        "name": "door",
        "id": 12,
        "x": 96,
        "y": 32,
        "width": 8,
        "height": 24
      },
      {
        "name": "apple_item",
        "id": 13,
        "x": 48,
        "y": 40,
        "width": 8,
        "height": 8
      }
    ]
  },
  {
    "name": "reversers",
    "entities": [
      {
        "name": "reverser",
        "id": 0,
        "x": 0,
        "y": 48,
        "height": 8
      },
      {
        "name": "reverser",
        "id": 1,
        "x": 88,
        "y": 48,
        "height": 8
      }
    ]
  }
];

// src/scenes/Level11.js
function Level11() {
  return Level(LEVEL11DATA);
}
function Level11Tilemap() {
  return LevelTilemap(LEVEL11DATA[0].data);
}

// src/Game.js
var btn = Keyboard({
  left: "ArrowLeft",
  right: "ArrowRight",
  jump: "z",
  attack: "x",
  select: "c",
  debug: "q",
  fscreen: "e",
  restart: "r"
});
var store = /* @__PURE__ */ (() => {
  return {
    sceneIndex: 1,
    // player
    fireBall: { name: "fireball", total: 0, max: 50 },
    laserBeam: { name: "laserBeam", total: 0, max: 50 },
    currentPowerName: "fireball",
    resetPlayerProgress: () => {
      store.fireBall.total = 0;
      store.laserBeam.total = 0;
      store.currentPowerName = "fireball";
    },
    setPlayerPower: (powerType, total) => {
      if (powerType === "laserBeam") {
        store.laserBeam.total = total;
        if (store.laserBeam.total > store.laserBeam.max) {
          store.laserBeam.total = store.laserBeam.max;
        }
        if (store.currentPowerName === "fireball" && !store.fireBall.total && store.laserBeam.total) {
          store.currentPowerName = "laserBeam";
        }
      } else {
        store.fireBall.total = total;
        if (store.fireBall.total > store.fireBall.max) {
          store.fireBall.total = store.fireBall.max;
        }
        if (store.currentPowerName === "laserBeam" && !store.laserBeam.total && store.fireBall.total) {
          store.currentPowerName = "fireball";
        }
      }
    }
  };
})();
var ticker = Ticker();
var root = (() => {
  const scenes = [
    // maybe menu
    [null, null, null],
    // levels
    [Level1, Level1Tilemap, Hud],
    [Level2, Level2Tilemap, Hud],
    [Level3, Level3Tilemap, Hud],
    [Level4, Level4Tilemap, Hud],
    [Level5, Level5Tilemap, Hud],
    [Level6, Level6Tilemap, Hud],
    [Level7, Level7Tilemap, Hud],
    [Level8, Level8Tilemap, Hud],
    [Level9, Level9Tilemap, Hud],
    [Level10, Level10Tilemap, Hud],
    [Level11, Level11Tilemap, Hud],
    // end scene
    [null, null, End]
  ];
  const layers = CanvasLayers();
  const bgSceneManager = SceneManager();
  const fgSceneManager = SceneManager();
  const uiSceneManager = SceneManager();
  const actorPool = ActorPool();
  const sfxPool = SfxPool();
  const powerPool = PowerPool();
  const itemsPool = ItemsPool();
  const deathExplosionPool = DeathExplosionPool();
  const scene = {
    set: (sceneIndex) => {
      const sc = scenes[sceneIndex];
      const fg = sc[0];
      const bg = sc[1];
      const hud = sc[2];
      fgSceneManager.clear();
      bgSceneManager.clear();
      uiSceneManager.clear();
      if (fg) {
        fgSceneManager.set(fg);
      }
      if (bg) {
        bgSceneManager.set(bg);
      }
      if (hud) {
        uiSceneManager.set(hud);
      }
      store.sceneIndex = sceneIndex;
    },
    render: (fg, bg, ui) => {
      fgSceneManager.render(fg.ctx);
      bgSceneManager.render(bg.ctx);
      uiSceneManager.render(ui.ctx);
    },
    update: () => {
      fgSceneManager.update();
      uiSceneManager.update();
    },
    reload: () => {
      killTimers();
      store.resetPlayerProgress();
      switch (store.sceneIndex) {
        case 2:
          store.setPlayerPower("fireball", 1);
          break;
        case 5:
          store.setPlayerPower("fireball", 1);
          break;
        case 7:
          store.setPlayerPower("fireball", 1);
          break;
        case 11:
          store.setPlayerPower("fireball", 2);
          break;
      }
      scene.set(store.sceneIndex);
    },
    next: () => {
      killTimers();
      store.sceneIndex += 1;
      scene.set(store.sceneIndex);
    }
  };
  return {
    scene,
    layers,
    actorPool,
    sfxPool,
    powerPool,
    dexpPool: deathExplosionPool,
    itemsPool
  };
})();
function Game() {
  const sceneManager = root.scene;
  const layers = root.layers;
  const bg = layers.add("bg", GAME_WIDTH, GAME_HEIGHT);
  const fg = layers.add("fg", GAME_WIDTH, GAME_HEIGHT);
  const ui = layers.add("ui", GAME_WIDTH, GAME_HEIGHT);
  document.body.appendChild(bg.canvas);
  document.body.appendChild(fg.canvas);
  document.body.appendChild(ui.canvas);
  ticker.add("update", () => {
    updateTimers();
    sceneManager.update();
  });
  ticker.add("render", () => {
    sceneManager.render(fg, bg, ui);
  });
  sceneManager.reload();
  Resizer([bg.canvas, fg.canvas, ui.canvas], { width: GAME_WIDTH, height: GAME_HEIGHT });
  Sound.music();
}

// src/main.js
window.onload = () => {
  Game();
  window.focus();
  document.body.addEventListener("click", function() {
    window.focus();
  }, false);
};
//# sourceMappingURL=data:application/json;base64,
